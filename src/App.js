import loadable from '@loadable/component';import AsyncStorage from '@react-native-community/async-storage';import { NavigationContainer } from '@react-navigation/native';import { createStackNavigator } from '@react-navigation/stack';import * as React from 'react';import { Platform, StatusBar, StyleSheet, View } from 'react-native';import FlashMessage from 'react-native-flash-message';import 'react-native-gesture-handler';import { SafeAreaProvider } from 'react-native-safe-area-context';import { Provider } from 'react-redux';import Colors from './constants/Colors';import { normalize } from './constants/Layout';import './languages/i18n.config';import i18n from './languages/i18n.config';import actions from './redux/app.actions';import SplashScreen from './screens/Splash.screen';import SessionUtils from './session/SessionUtils';import store from './redux/store';import useRootNavigation from './utils/useRootNavigation';const Stack = createStackNavigator();export default function App() {  const [isLoadingComplete, setLoadingComplete] = React.useState(false);  const [initialRouteName, setInitialRouteName] = React.useState('');  const { navigationRef, isMountedRef } = useRootNavigation();  async function loadResourcesAndDataAsync() {    try {      const result = JSON.parse(await AsyncStorage.getItem('session'));      if (result) {        SessionUtils.setToken(result.token);        delete result.token;      }      if (result && !result.isNew) {        store.dispatch({ type: actions.APP_STARTED, payload: result });        const userInfo = JSON.parse(await AsyncStorage.getItem('userInfo'));        store.dispatch({ type: actions.USER_INFO_UPDATE, payload: userInfo });        setInitialRouteName('Root');      }    } catch (e) {      store.dispatch({ type: actions.APP_START_FAILED });      console.log('error', e);    }    let defaultLanguage = 'vi-VN';    try {      defaultLanguage = (await AsyncStorage.getItem('languages')) || 'vi-VN';    } catch (e) {}    await i18n.changeLanguage(defaultLanguage);    setLoadingComplete(true);  }  React.useEffect(() => {    if (!isLoadingComplete) {      setInitialRouteName('login');      loadResourcesAndDataAsync().then(() => {});    }    isMountedRef.current = true;    return () => {      isMountedRef.current = false;    };  }, [isLoadingComplete, isMountedRef]);  if (!isLoadingComplete) {    return <SplashScreen />;  } else {    return (      <Provider store={store}>        <SafeAreaProvider>          <View style={styles.container}>            {Platform.OS === 'ios' && <StatusBar barStyle="default" />}            <NavigationContainer ref={navigationRef}>              <Stack.Navigator initialRouteName={initialRouteName}>                <Stack.Screen                  name="Auth"                  component={loadable(() =>                    import('./screens/auth/Auth.screen'),                  )}                  options={{ headerShown: false }}                />                <Stack.Screen                  name="Root"                  component={loadable(() =>                    import('./screens/root/Root.screen'),                  )}                  options={{ headerShown: false }}                />              </Stack.Navigator>            </NavigationContainer>            {/* GLOBAL FLASH MESSAGE COMPONENT INSTANCE */}            <FlashMessage position="top" duration={3000} />          </View>        </SafeAreaProvider>      </Provider>    );  }}const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: Colors.backgroundColor,    color: Colors.gray,    fontWeight: '400',    fontSize: normalize(14),    fontFamily: 'Roboto',  },});