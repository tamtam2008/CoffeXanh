{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Container = _interopRequireDefault(require(\"../../../../../../components/layout/Container\"));\n\nvar _BaseStyles = require(\"../../../../../../constants/BaseStyles\");\n\nvar _CustomIcon = _interopRequireDefault(require(\"../../../../../../components/CustomIcon\"));\n\nvar _Icon = require(\"../../../../../../constants/Icon\");\n\nvar _reactNativeAndroidLocationEnabler = _interopRequireDefault(require(\"react-native-android-location-enabler\"));\n\nvar _reactNativeGeolocationService = _interopRequireDefault(require(\"react-native-geolocation-service\"));\n\nvar _MapUtils = _interopRequireDefault(require(\"../../../../../../utils/MapUtils\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ADMINS\\\\Desktop\\\\GreenApp\\\\CoffeXanh\\\\src\\\\screens\\\\root\\\\store\\\\mapStore\\\\components\\\\FindYourPosition\\\\FindYourPositionContent.js\";\n\nvar LATITUDE_DELTA = 0.01;\n\nvar LONGITUDE_DELTA = _MapUtils.default.getLongitudeDelta(LATITUDE_DELTA);\n\nvar FindYourPositionContent = function FindYourPositionContent(_ref) {\n  var onAfterFinding = _ref.onAfterFinding,\n      dispatch = _ref.dispatch;\n  var anim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;\n  (0, _react.useEffect)(function () {\n    var animation = _reactNative.Animated.loop(_reactNative.Animated.sequence([_reactNative.Animated.timing(anim, {\n      toValue: -10,\n      duration: 500,\n      useNativeDriver: true\n    }), _reactNative.Animated.timing(anim, {\n      toValue: 0,\n      duration: 500,\n      useNativeDriver: true\n    })]));\n\n    animation.start();\n    return function () {\n      animation.stop();\n    };\n  });\n  (0, _react.useLayoutEffect)(function () {\n    if (_reactNative.Platform.OS === 'android') {\n      _reactNativeAndroidLocationEnabler.default.promptForEnableLocationIfNeeded({\n        interval: 10000,\n        fastInterval: 5000\n      }).then(function (data) {\n        console.log('FindYourPositionContent', 'Finding your position...', data);\n        findLocation();\n      }).catch(function (err) {\n        console.log(err);\n        onAfterFinding();\n      });\n    } else {\n      findLocation();\n    }\n  }, [findLocation, onAfterFinding]);\n  var findLocation = (0, _react.useCallback)(function () {\n    _reactNativeGeolocationService.default.getCurrentPosition(function (pos) {\n      console.log('FindYourPositionContent', pos);\n      onAfterFinding({\n        latitude: pos.coords.latitude,\n        longitude: pos.coords.longitude,\n        latitudeDelta: LATITUDE_DELTA,\n        longitudeDelta: LONGITUDE_DELTA\n      });\n    }, function (e) {\n      console.log('FindYourPositionContent', e);\n      onAfterFinding();\n    }, {\n      enableHighAccuracy: true,\n      timeout: 30000,\n      maximumAge: 1000\n    });\n  }, [onAfterFinding]);\n  return _react.default.createElement(_Container.default, {\n    contentStyle: [_BaseStyles.BaseStyles.baseContent, {\n      justifyContent: 'center',\n      alignItems: 'center'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Animated.View, {\n    style: {\n      transform: [{\n        translateY: anim\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_CustomIcon.default, {\n    name: 'map-marker-alt',\n    type: _Icon.IconType.FONTAWESOME,\n    size: 48,\n    focused: true,\n    custom: {\n      style: [_BaseStyles.BaseStyles.textShadow]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })), _react.default.createElement(_reactNative.Text, {\n    style: [_BaseStyles.BaseFontStyles.body1, _BaseStyles.BaseStyles.ml_5],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"\\u0110ang t\\xECm v\\u1ECB tr\\xED c\\u1EE7a b\\u1EA1n...\"));\n};\n\nvar _default = FindYourPositionContent;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/screens/root/store/mapStore/components/FindYourPosition/FindYourPositionContent.js"],"names":["LATITUDE_DELTA","LONGITUDE_DELTA","MapUtils","getLongitudeDelta","FindYourPositionContent","onAfterFinding","dispatch","anim","Animated","Value","current","animation","loop","sequence","timing","toValue","duration","useNativeDriver","start","stop","Platform","OS","RNAndroidLocationEnabler","promptForEnableLocationIfNeeded","interval","fastInterval","then","data","console","log","findLocation","catch","err","Geolocation","getCurrentPosition","pos","latitude","coords","longitude","latitudeDelta","longitudeDelta","e","enableHighAccuracy","timeout","maximumAge","BaseStyles","baseContent","justifyContent","alignItems","transform","translateY","IconType","FONTAWESOME","style","textShadow","BaseFontStyles","body1","ml_5"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useCallback } from 'react';\r\nimport { Animated, Text, Platform } from 'react-native';\r\nimport Container from '../../../../../../components/layout/Container';\r\nimport {\r\n  BaseFontStyles,\r\n  BaseStyles,\r\n} from '../../../../../../constants/BaseStyles';\r\nimport CustomIcon from '../../../../../../components/CustomIcon';\r\nimport { IconType } from '../../../../../../constants/Icon';\r\nimport RNAndroidLocationEnabler from 'react-native-android-location-enabler';\r\nimport Geolocation from 'react-native-geolocation-service';\r\nimport MapUtils from '../../../../../../utils/MapUtils';\r\n\r\nconst LATITUDE_DELTA = 0.01;\r\nconst LONGITUDE_DELTA = MapUtils.getLongitudeDelta(LATITUDE_DELTA);\r\n\r\nconst FindYourPositionContent = ({ onAfterFinding, dispatch }) => {\r\n  const anim = useRef(new Animated.Value(0)).current;\r\n  useEffect(() => {\r\n    const animation = Animated.loop(\r\n      Animated.sequence([\r\n        Animated.timing(anim, {\r\n          toValue: -10,\r\n          duration: 500,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(anim, {\r\n          toValue: 0,\r\n          duration: 500,\r\n          useNativeDriver: true,\r\n        }),\r\n      ]),\r\n    );\r\n    animation.start();\r\n    return () => {\r\n      animation.stop();\r\n    };\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    if (Platform.OS === 'android') {\r\n      RNAndroidLocationEnabler.promptForEnableLocationIfNeeded({\r\n        interval: 10000,\r\n        fastInterval: 5000,\r\n      })\r\n        .then((data) => {\r\n          console.log(\r\n            'FindYourPositionContent',\r\n            'Finding your position...',\r\n            data,\r\n          );\r\n          findLocation();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          onAfterFinding();\r\n        });\r\n    } else {\r\n      findLocation();\r\n    }\r\n  }, [findLocation, onAfterFinding]);\r\n\r\n  const findLocation = useCallback(() => {\r\n    Geolocation.getCurrentPosition(\r\n      (pos) => {\r\n        console.log('FindYourPositionContent', pos);\r\n        onAfterFinding({\r\n          latitude: pos.coords.latitude,\r\n          longitude: pos.coords.longitude,\r\n          latitudeDelta: LATITUDE_DELTA,\r\n          longitudeDelta: LONGITUDE_DELTA,\r\n        });\r\n      },\r\n      (e) => {\r\n        console.log('FindYourPositionContent', e);\r\n        onAfterFinding();\r\n      },\r\n      { enableHighAccuracy: true, timeout: 30000, maximumAge: 1000 },\r\n    );\r\n  }, [onAfterFinding]);\r\n  return (\r\n    <Container\r\n      contentStyle={[\r\n        BaseStyles.baseContent,\r\n        {\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n        },\r\n      ]}>\r\n      <Animated.View style={{ transform: [{ translateY: anim }] }}>\r\n        <CustomIcon\r\n          name={'map-marker-alt'}\r\n          type={IconType.FONTAWESOME}\r\n          size={48}\r\n          focused={true}\r\n          custom={{ style: [BaseStyles.textShadow] }}\r\n        />\r\n      </Animated.View>\r\n      <Text style={[BaseFontStyles.body1, BaseStyles.ml_5]}>\r\n        Đang tìm vị trí của bạn...\r\n      </Text>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FindYourPositionContent;\r\n"]},"metadata":{},"sourceType":"script"}