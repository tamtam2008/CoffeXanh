{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Colors = _interopRequireDefault(require(\"../constants/Colors\"));\n\nvar _Layout = require(\"../constants/Layout\");\n\nvar _reactNativeMaskedText = require(\"react-native-masked-text\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ADMINS\\\\Desktop\\\\GreenApp\\\\CoffeXanh\\\\src\\\\components\\\\XTextBox.js\";\n\nvar XTextBox = function XTextBox(_ref) {\n  var value = _ref.value,\n      placeholder = _ref.placeholder,\n      _ref$keyboardType = _ref.keyboardType,\n      keyboardType = _ref$keyboardType === void 0 ? 'default' : _ref$keyboardType,\n      size = _ref.size,\n      maxLength = _ref.maxLength,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$onSubmit = _ref.onSubmit,\n      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,\n      _ref$onFocus = _ref.onFocus,\n      _onFocus = _ref$onFocus === void 0 ? function () {} : _ref$onFocus,\n      _ref$isError = _ref.isError,\n      isError = _ref$isError === void 0 ? false : _ref$isError,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$textAlign = _ref.textAlign,\n      textAlign = _ref$textAlign === void 0 ? 'left' : _ref$textAlign,\n      _ref$autoFocus = _ref.autoFocus,\n      autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$mask = _ref.mask,\n      mask = _ref$mask === void 0 ? '' : _ref$mask,\n      _ref$maskType = _ref.maskType,\n      maskType = _ref$maskType === void 0 ? 'custom' : _ref$maskType,\n      options = _ref.options,\n      ref = _ref.ref,\n      _ref$secureTextEntry = _ref.secureTextEntry,\n      secureTextEntry = _ref$secureTextEntry === void 0 ? false : _ref$secureTextEntry;\n\n  var _useState = (0, _react.useState)(autoFocus),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', function () {\n      setFocus(false);\n\n      _reactNative.Keyboard.dismiss();\n    });\n\n    return function () {\n      keyboardDidHideListener.remove();\n    };\n  }, []);\n  return mask ? _react.default.createElement(_reactNativeMaskedText.TextInputMask, {\n    style: [styles.input, isError ? styles.isError : focus ? styles.focus : {}, size ? {\n      width: size\n    } : {}].concat((0, _toConsumableArray2.default)(style instanceof Array ? style : [style])),\n    placeholder: placeholder,\n    onChangeText: onChange,\n    onSubmitEditing: onSubmit,\n    onEndEditing: function onEndEditing() {\n      setFocus(false);\n\n      _onFocus(false);\n    },\n    onFocus: function onFocus(e) {\n      setFocus(true);\n\n      _onFocus(true);\n    },\n    value: value,\n    keyboardType: keyboardType,\n    maxLength: maxLength,\n    textAlign: textAlign ? textAlign : 'left',\n    editable: !disabled,\n    autoFocus: focus,\n    type: maskType,\n    options: options ? options : {\n      mask: mask\n    },\n    ref: ref,\n    secureTextEntry: secureTextEntry,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }) : _react.default.createElement(_reactNative.TextInput, {\n    style: [styles.input, isError ? styles.isError : focus ? styles.focus : {}, size ? {\n      width: size\n    } : {}].concat((0, _toConsumableArray2.default)(style instanceof Array ? style : [style])),\n    placeholder: placeholder,\n    onChangeText: onChange,\n    onSubmitEditing: onSubmit || function () {},\n    onEndEditing: function onEndEditing() {\n      setFocus(false);\n\n      _onFocus(false);\n    },\n    onFocus: function onFocus(e) {\n      setFocus(true);\n\n      _onFocus(true);\n    },\n    value: value,\n    keyboardType: keyboardType,\n    maxLength: maxLength,\n    textAlign: textAlign ? textAlign : 'left',\n    editable: !disabled,\n    autoFocus: focus,\n    secureTextEntry: secureTextEntry,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  });\n};\n\nvar _default = XTextBox;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  input: {\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderRadius: 5,\n    borderColor: _Colors.default.lightGray,\n    paddingTop: (0, _Layout.normalize)(2.5),\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: (0, _Layout.normalize)(3),\n    backgroundColor: '#fff'\n  },\n  focus: {\n    borderColor: _Colors.default.tintColor\n  },\n  isError: {\n    borderColor: _Colors.default.red\n  }\n});","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/components/XTextBox.js"],"names":["XTextBox","value","placeholder","keyboardType","size","maxLength","onChange","onSubmit","onFocus","isError","disabled","textAlign","autoFocus","style","mask","maskType","options","ref","secureTextEntry","focus","setFocus","keyboardDidHideListener","Keyboard","addListener","dismiss","remove","styles","input","width","Array","e","StyleSheet","create","borderStyle","borderWidth","borderRadius","borderColor","Colors","lightGray","paddingTop","paddingLeft","paddingRight","paddingBottom","backgroundColor","tintColor","red"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Keyboard, StyleSheet, TextInput } from 'react-native';\r\nimport Colors from '../constants/Colors';\r\nimport { normalize } from '../constants/Layout';\r\nimport { TextInputMask } from 'react-native-masked-text';\r\n\r\nconst XTextBox = ({\r\n  value,\r\n  placeholder,\r\n  keyboardType = 'default',\r\n  size,\r\n  maxLength,\r\n  onChange = () => {},\r\n  onSubmit = () => {},\r\n  onFocus = () => {},\r\n  isError = false,\r\n  disabled = false,\r\n  textAlign = 'left',\r\n  autoFocus = false,\r\n  style = {},\r\n  mask = '',\r\n  maskType = 'custom',\r\n  options,\r\n  ref,\r\n  secureTextEntry = false,\r\n}) => {\r\n  const [focus, setFocus] = useState(autoFocus);\r\n  useEffect(() => {\r\n    const keyboardDidHideListener = Keyboard.addListener(\r\n      'keyboardDidHide',\r\n      () => {\r\n        setFocus(false);\r\n        Keyboard.dismiss();\r\n      },\r\n    );\r\n    return () => {\r\n      keyboardDidHideListener.remove();\r\n    };\r\n  }, []);\r\n  return mask ? (\r\n    <TextInputMask\r\n      style={[\r\n        styles.input,\r\n        isError ? styles.isError : focus ? styles.focus : {},\r\n        size ? { width: size } : {},\r\n        ...(style instanceof Array ? style : [style]),\r\n      ]}\r\n      placeholder={placeholder}\r\n      onChangeText={onChange}\r\n      onSubmitEditing={onSubmit}\r\n      onEndEditing={() => {\r\n        setFocus(false);\r\n        onFocus(false);\r\n      }}\r\n      onFocus={(e) => {\r\n        setFocus(true);\r\n        onFocus(true);\r\n      }}\r\n      value={value}\r\n      keyboardType={keyboardType}\r\n      maxLength={maxLength}\r\n      textAlign={textAlign ? textAlign : 'left'}\r\n      editable={!disabled}\r\n      autoFocus={focus}\r\n      type={maskType}\r\n      // mask={mask}\r\n      options={\r\n        options\r\n          ? options\r\n          : {\r\n              /**\r\n               * mask: (String | required | default '')\r\n               * the mask pattern\r\n               * 9 - accept digit.\r\n               * A - accept alpha.\r\n               * S - accept alphanumeric.\r\n               * * - accept all, EXCEPT white space.\r\n               */\r\n              mask: mask,\r\n            }\r\n      }\r\n      ref={ref}\r\n      secureTextEntry={secureTextEntry}\r\n    />\r\n  ) : (\r\n    <TextInput\r\n      style={[\r\n        styles.input,\r\n        isError ? styles.isError : focus ? styles.focus : {},\r\n        size ? { width: size } : {},\r\n        ...(style instanceof Array ? style : [style]),\r\n      ]}\r\n      placeholder={placeholder}\r\n      onChangeText={onChange}\r\n      onSubmitEditing={onSubmit || (() => {})}\r\n      onEndEditing={() => {\r\n        setFocus(false);\r\n        onFocus(false);\r\n      }}\r\n      onFocus={(e) => {\r\n        setFocus(true);\r\n        onFocus(true);\r\n      }}\r\n      value={value}\r\n      keyboardType={keyboardType}\r\n      maxLength={maxLength}\r\n      textAlign={textAlign ? textAlign : 'left'}\r\n      editable={!disabled}\r\n      autoFocus={focus}\r\n      secureTextEntry={secureTextEntry}\r\n    />\r\n  );\r\n};\r\n\r\nexport default XTextBox;\r\n\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    borderStyle: 'solid',\r\n    borderWidth: 2,\r\n    borderRadius: 5,\r\n    borderColor: Colors.lightGray,\r\n    paddingTop: normalize(2.5),\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: normalize(3),\r\n    backgroundColor: '#fff',\r\n  },\r\n  focus: {\r\n    borderColor: Colors.tintColor,\r\n  },\r\n  isError: {\r\n    borderColor: Colors.red,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"script"}