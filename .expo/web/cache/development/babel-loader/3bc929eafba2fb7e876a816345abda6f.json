{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar Base64 = {\n  btoa: function btoa() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var str = input;\n    var output = '';\n\n    for (var block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n      charCode = str.charCodeAt(i += 3 / 4);\n\n      if (charCode > 0xff) {\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  },\n  atob: function atob() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var str = input.replace(/[=]+$/, '');\n    var output = '';\n\n    if (str.length % 4 === 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (var bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  }\n};\nvar _default = Base64;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/utils/Base64.ts"],"names":["chars","Base64","btoa","input","str","output","block","charCode","i","map","charAt","charCodeAt","Error","atob","replace","length","bc","bs","buffer","String","fromCharCode","indexOf"],"mappings":";;;;AAGA,IAAMA,KAAK,GACT,mEADF;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE,gBAAwB;AAAA,QAAvBC,KAAuB,uEAAP,EAAO;AAC5B,QAAIC,GAAG,GAAGD,KAAV;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,SACE,IAAIC,KAAK,GAAG,CAAZ,EAAeC,QAAf,EAAyBC,CAAC,GAAG,CAA7B,EAAgCC,GAAG,GAAGT,KADxC,EAEEI,GAAG,CAACM,MAAJ,CAAWF,CAAC,GAAG,CAAf,MAAuBC,GAAG,GAAG,GAAP,EAAaD,CAAC,GAAG,CAAvC,CAFF,EAGEH,MAAM,IAAII,GAAG,CAACC,MAAJ,CAAW,KAAMJ,KAAK,IAAK,IAAKE,CAAC,GAAG,CAAL,GAAU,CAAzC,CAHZ,EAIE;AACAD,MAAAA,QAAQ,GAAGH,GAAG,CAACO,UAAJ,CAAgBH,CAAC,IAAI,IAAI,CAAzB,CAAX;;AAEA,UAAID,QAAQ,GAAG,IAAf,EAAqB;AACnB,cAAM,IAAIK,KAAJ,CACJ,0FADI,CAAN;AAGD;;AAEDN,MAAAA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAeC,QAAvB;AACD;;AAED,WAAOF,MAAP;AACD,GAtBY;AAwBbQ,EAAAA,IAAI,EAAE,gBAAwB;AAAA,QAAvBV,KAAuB,uEAAP,EAAO;AAC5B,QAAIC,GAAG,GAAGD,KAAK,CAACW,OAAN,CAAc,OAAd,EAAuB,EAAvB,CAAV;AACA,QAAIT,MAAM,GAAG,EAAb;;AAEA,QAAID,GAAG,CAACW,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAIH,KAAJ,CACJ,mEADI,CAAN;AAGD;;AACD,SACE,IAAII,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,CAAjB,EAAoBC,MAApB,EAA4BV,CAAC,GAAG,CADlC,EAEGU,MAAM,GAAGd,GAAG,CAACM,MAAJ,CAAWF,CAAC,EAAZ,CAFZ,EAGE,CAACU,MAAD,KAAaD,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAlC,EAA2CF,EAAE,KAAK,CAA9D,IACKX,MAAM,IAAIc,MAAM,CAACC,YAAP,CAAoB,MAAOH,EAAE,KAAM,CAAC,CAAD,GAAKD,EAAN,GAAY,CAAjB,CAA7B,CADf,GAEI,CALN,EAME;AACAE,MAAAA,MAAM,GAAGlB,KAAK,CAACqB,OAAN,CAAcH,MAAd,CAAT;AACD;;AAED,WAAOb,MAAP;AACD;AA5CY,CAAf;eA+CeJ,M","sourcesContent":["/* eslint-disable no-bitwise */\r\n// Inspired by: https://github.com/davidchambers/Base64.js/blob/master/base64.js\r\n\r\nconst chars =\r\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\nconst Base64 = {\r\n  btoa: (input: string = '') => {\r\n    let str = input;\r\n    let output = '';\r\n\r\n    for (\r\n      let block = 0, charCode, i = 0, map = chars;\r\n      str.charAt(i | 0) || ((map = '='), i % 1);\r\n      output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\r\n    ) {\r\n      charCode = str.charCodeAt((i += 3 / 4));\r\n\r\n      if (charCode > 0xff) {\r\n        throw new Error(\r\n          \"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\",\r\n        );\r\n      }\r\n\r\n      block = (block << 8) | charCode;\r\n    }\r\n\r\n    return output;\r\n  },\r\n\r\n  atob: (input: string = '') => {\r\n    let str = input.replace(/[=]+$/, '');\r\n    let output = '';\r\n\r\n    if (str.length % 4 === 1) {\r\n      throw new Error(\r\n        \"'atob' failed: The string to be decoded is not correctly encoded.\",\r\n      );\r\n    }\r\n    for (\r\n      let bc = 0, bs = 0, buffer, i = 0;\r\n      (buffer = str.charAt(i++));\r\n      ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\r\n        ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\r\n        : 0\r\n    ) {\r\n      buffer = chars.indexOf(buffer);\r\n    }\r\n\r\n    return output;\r\n  },\r\n};\r\n\r\nexport default Base64;\r\n"]},"metadata":{},"sourceType":"script"}