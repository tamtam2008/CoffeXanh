{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _Container = _interopRequireDefault(require(\"../../../components/layout/Container\"));\n\nvar _XButton = _interopRequireDefault(require(\"../../../components/XButton\"));\n\nvar _XLabelButton = _interopRequireDefault(require(\"../../../components/XLabelButton\"));\n\nvar _XTextBox = _interopRequireDefault(require(\"../../../components/XTextBox\"));\n\nvar _BaseStyles = require(\"../../../constants/BaseStyles\");\n\nvar _Layout = require(\"../../../constants/Layout\");\n\nvar _Login = _interopRequireDefault(require(\"./Login.style\"));\n\nvar _Login2 = _interopRequireDefault(require(\"./Login.reducer\"));\n\nvar _useRootNavigation = _interopRequireDefault(require(\"../../../utils/useRootNavigation\"));\n\nvar _Colors = _interopRequireDefault(require(\"../../../constants/Colors\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ADMINS\\\\Desktop\\\\GreenApp\\\\CoffeXanh\\\\src\\\\screens\\\\auth\\\\login\\\\Login.screen.js\";\n\n(0, _reactNativeScreens.enableScreens)();\nvar navigation = (0, _useRootNavigation.default)();\n\nvar LoginScreen = function LoginScreen(props) {\n  var _useReducer = (0, _react.useReducer)(_Login2.default.reducer, _Login2.default.initState),\n      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      username = _useState4[0],\n      setUsername = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(''),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var doLogin = (0, _react.useCallback)(function () {\n    navigation.navigate('Root');\n  }, []);\n  var doResetPwd = (0, _react.useCallback)(function () {\n    navigation.navigate('resetPassword');\n  }, []);\n  var doSignUp = (0, _react.useCallback)(function () {\n    navigation.navigate('register');\n  }, []);\n  return _react.default.createElement(_Container.default, {\n    isRequesting: state.isRequesting,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Image, {\n    style: _Login.default.image,\n    source: require('../../../../assets/images/6.png'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _Login.default.bodyWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: [_Login.default.bodyContainer],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_XTextBox.default, {\n    placeholder: t('login_screen.username'),\n    onChange: setUsername,\n    value: username,\n    keyboardType: \"number-pad\",\n    maxLength: 20,\n    size: (0, _Layout.normalize)(249),\n    isValid: error,\n    style: [_BaseStyles.BaseFontStyles.subHeader, _BaseStyles.BaseStyles.mb_10],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), _react.default.createElement(_XTextBox.default, {\n    placeholder: t('login_screen.password'),\n    onChange: setPassword,\n    value: password,\n    keyboardType: \"number-pad\",\n    maxLength: 20,\n    size: (0, _Layout.normalize)(249),\n    isValid: error,\n    style: [_BaseStyles.BaseFontStyles.subHeader, _BaseStyles.BaseStyles.mb_16],\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), !!error && _react.default.createElement(_reactNative.Text, {\n    style: [_BaseStyles.BaseFontStyles.caption, _Login.default.errorMsg, _BaseStyles.BaseStyles.mt_16],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, error), _react.default.createElement(_XButton.default, {\n    style: _Login.default.loginBtn,\n    title: t('login_screen.loginBtn'),\n    onPress: doLogin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), _react.default.createElement(_XLabelButton.default, {\n    style: [_BaseStyles.BaseStyles.mt_10],\n    title: t('login_screen.resetPwdBtn'),\n    onPress: doResetPwd,\n    color: _Colors.default.tintColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: [_BaseStyles.BaseStyles.mt_10],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, t('login_screen.message')), _react.default.createElement(_XLabelButton.default, {\n    style: [_BaseStyles.BaseStyles.mt_10],\n    title: t('RegisterScreen.title'),\n    onPress: doSignUp,\n    color: _Colors.default.tintColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }))));\n};\n\nvar mapDispatchToProps = {};\n\nvar _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(LoginScreen);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/screens/auth/login/Login.screen.js"],"names":["navigation","LoginScreen","props","loginReducer","reducer","initState","state","dispatch","t","error","setError","username","setUsername","password","setPassword","doLogin","navigate","doResetPwd","doSignUp","isRequesting","styles","image","require","bodyWrapper","bodyContainer","BaseFontStyles","subHeader","BaseStyles","mb_10","mb_16","caption","errorMsg","mt_16","loginBtn","mt_10","Colors","tintColor","mapDispatchToProps"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React, { useCallback, useReducer, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Image, Text, View } from 'react-native';\r\nimport { enableScreens } from 'react-native-screens';\r\nimport { connect } from 'react-redux';\r\nimport Container from '../../../components/layout/Container';\r\nimport XButton from '../../../components/XButton';\r\nimport XLabelButton from '../../../components/XLabelButton';\r\nimport XTextBox from '../../../components/XTextBox';\r\nimport { BaseFontStyles, BaseStyles } from '../../../constants/BaseStyles';\r\nimport { normalize } from '../../../constants/Layout';\r\nimport styles from './Login.style';\r\nimport loginReducer from './Login.reducer';\r\nimport useRootNavigation from '../../../utils/useRootNavigation';\r\nimport Colors from '../../../constants/Colors';\r\n\r\nenableScreens();\r\n\r\nconst navigation = useRootNavigation();\r\n\r\nconst LoginScreen = props => {\r\n  const [state, dispatch] = useReducer(\r\n    loginReducer.reducer,\r\n    loginReducer.initState,\r\n  );\r\n  const { t } = useTranslation();\r\n  const [error, setError] = useState(null);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const doLogin = useCallback(() => {\r\n    //check error\r\n    // setError({msg: ''})\r\n    // todo some thing\r\n    navigation.navigate('Root');\r\n  }, []);\r\n  const doResetPwd = useCallback(() => {\r\n    navigation.navigate('resetPassword');\r\n  }, []);\r\n\r\n  const doSignUp = useCallback(() => {\r\n    navigation.navigate('register');\r\n  }, []);\r\n  return (\r\n    <Container isRequesting={state.isRequesting}>\r\n      <Image\r\n        style={styles.image}\r\n        source={require('../../../../assets/images/6.png')}\r\n      />\r\n      <View style={styles.bodyWrapper}>\r\n        <View style={[styles.bodyContainer]}>\r\n          <XTextBox\r\n            placeholder={t('login_screen.username')}\r\n            onChange={setUsername}\r\n            value={username}\r\n            keyboardType=\"number-pad\"\r\n            maxLength={20}\r\n            size={normalize(249)}\r\n            isValid={error}\r\n            style={[BaseFontStyles.subHeader, BaseStyles.mb_10]}\r\n          />\r\n          <XTextBox\r\n            placeholder={t('login_screen.password')}\r\n            onChange={setPassword}\r\n            value={password}\r\n            keyboardType=\"number-pad\"\r\n            maxLength={20}\r\n            size={normalize(249)}\r\n            isValid={error}\r\n            style={[BaseFontStyles.subHeader, BaseStyles.mb_16]}\r\n            secureTextEntry={true}\r\n          />\r\n          {!!error && (\r\n            <Text\r\n              style={[\r\n                BaseFontStyles.caption,\r\n                styles.errorMsg,\r\n                BaseStyles.mt_16,\r\n              ]}>\r\n              {error}\r\n            </Text>\r\n          )}\r\n          <XButton\r\n            style={styles.loginBtn}\r\n            title={t('login_screen.loginBtn')}\r\n            onPress={doLogin}\r\n          />\r\n          <XLabelButton\r\n            style={[BaseStyles.mt_10]}\r\n            title={t('login_screen.resetPwdBtn')}\r\n            onPress={doResetPwd}\r\n            color={Colors.tintColor}\r\n          />\r\n          <Text style={[BaseStyles.mt_10]}>{t('login_screen.message')}</Text>\r\n          <XLabelButton\r\n            style={[BaseStyles.mt_10]}\r\n            title={t('RegisterScreen.title')}\r\n            onPress={doSignUp}\r\n            color={Colors.tintColor}\r\n          />\r\n        </View>\r\n      </View>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps,\r\n)(LoginScreen);\r\n"]},"metadata":{},"sourceType":"script"}