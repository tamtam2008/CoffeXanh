{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Avatar = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isequal\"));\n\nvar _config = require(\"../config\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _Icon = _interopRequireDefault(require(\"../icons/Icon\"));\n\nvar _Image = _interopRequireDefault(require(\"../image/Image\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ADMINS\\\\Desktop\\\\GreenApp\\\\CoffeXanh\\\\node_modules\\\\react-native-elements\\\\src\\\\avatar\\\\Avatar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150\n};\nvar defaultAccessory = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000'\n};\n\nvar AvatarComponent = function AvatarComponent(_ref) {\n  var onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View : _ref$Component,\n      containerStyle = _ref.containerStyle,\n      icon = _ref.icon,\n      iconStyle = _ref.iconStyle,\n      source = _ref.source,\n      size = _ref.size,\n      avatarStyle = _ref.avatarStyle,\n      rounded = _ref.rounded,\n      title = _ref.title,\n      titleStyle = _ref.titleStyle,\n      overlayContainerStyle = _ref.overlayContainerStyle,\n      showAccessory = _ref.showAccessory,\n      passedAccessory = _ref.accessory,\n      onAccessoryPress = _ref.onAccessoryPress,\n      imageProps = _ref.imageProps,\n      placeholderStyle = _ref.placeholderStyle,\n      renderPlaceholderContent = _ref.renderPlaceholderContent,\n      ImageComponent = _ref.ImageComponent,\n      attributes = (0, _objectWithoutProperties2.default)(_ref, [\"onPress\", \"onLongPress\", \"Component\", \"containerStyle\", \"icon\", \"iconStyle\", \"source\", \"size\", \"avatarStyle\", \"rounded\", \"title\", \"titleStyle\", \"overlayContainerStyle\", \"showAccessory\", \"accessory\", \"onAccessoryPress\", \"imageProps\", \"placeholderStyle\", \"renderPlaceholderContent\", \"ImageComponent\"]);\n  var width = typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  var height = width;\n  var titleSize = width / 2;\n  var iconSize = width / 2;\n\n  var accessory = _objectSpread(_objectSpread({}, defaultAccessory), passedAccessory);\n\n  var accessorySize = accessory.size || (width + height) / 2 / 3;\n\n  var Utils = showAccessory && _react.default.createElement(_reactNative.TouchableHighlight, {\n    style: _reactNative.StyleSheet.flatten([styles.accessory, {\n      width: accessorySize,\n      height: accessorySize,\n      borderRadius: accessorySize / 2\n    }, accessory.style]),\n    underlayColor: accessory.underlayColor,\n    onPress: onAccessoryPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, 'source' in accessory ? _react.default.createElement(_Image.default, (0, _extends2.default)({\n    style: {\n      width: accessorySize,\n      height: accessorySize,\n      borderRadius: accessorySize / 2\n    }\n  }, accessory, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })) : _react.default.createElement(_Icon.default, (0, _extends2.default)({\n    size: accessorySize * 0.8\n  }, accessory, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }))));\n\n  var PlaceholderContent = renderPlaceholderContent && (0, _helpers.renderNode)(undefined, renderPlaceholderContent) || title && _react.default.createElement(_reactNative.Text, {\n    style: _reactNative.StyleSheet.flatten([styles.title, {\n      fontSize: titleSize\n    }, titleStyle]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, title) || icon && _react.default.createElement(_Icon.default, {\n    style: iconStyle && iconStyle,\n    color: icon.color || 'white',\n    name: icon.name || 'user',\n    size: icon.size || iconSize,\n    type: icon.type && icon.type,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  });\n\n  var hidePlaceholder = !source;\n  return _react.default.createElement(Component, (0, _extends2.default)({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    style: _reactNative.StyleSheet.flatten([styles.container, {\n      height: height,\n      width: width\n    }, rounded && {\n      borderRadius: width / 2\n    }, containerStyle])\n  }, attributes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_Image.default, (0, _extends2.default)({\n    placeholderStyle: _reactNative.StyleSheet.flatten([placeholderStyle, hidePlaceholder && {\n      backgroundColor: 'transparent'\n    }]),\n    PlaceholderContent: PlaceholderContent,\n    containerStyle: _reactNative.StyleSheet.flatten([styles.overlayContainer, rounded && {\n      borderRadius: width / 2,\n      overflow: 'hidden'\n    }, overlayContainerStyle]),\n    source: source,\n    borderRadius: rounded ? width / 2 : undefined\n  }, imageProps, {\n    style: _reactNative.StyleSheet.flatten([styles.avatar, imageProps && imageProps.style, avatarStyle]),\n    ImageComponent: ImageComponent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  })), Utils);\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent'\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null\n  },\n  overlayContainer: {\n    flex: 1\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center'\n  },\n  accessory: _objectSpread({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa'\n  }, _reactNative.Platform.select({\n    android: {\n      elevation: 1\n    },\n    default: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 1,\n        height: 1\n      },\n      shadowRadius: 2,\n      shadowOpacity: 0.5\n    }\n  }))\n});\n\nAvatarComponent.propTypes = {\n  Component: _propTypes.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),\n  onPress: _propTypes.default.func,\n  onLongPress: _propTypes.default.func,\n  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  source: _helpers.ImageSourceType,\n  avatarStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  rounded: _propTypes.default.bool,\n  title: _propTypes.default.string,\n  titleStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  overlayContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  activeOpacity: _propTypes.default.number,\n  icon: _propTypes.default.object,\n  iconStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large', 'xlarge']), _propTypes.default.number]),\n  showAccessory: _propTypes.default.bool,\n  onAccessoryPress: _propTypes.default.func,\n  accessory: _propTypes.default.shape({\n    size: _propTypes.default.number,\n    name: _propTypes.default.string,\n    type: _propTypes.default.string,\n    color: _propTypes.default.string,\n    underlayColor: _propTypes.default.string,\n    style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array])\n  }),\n  placeholderStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  renderPlaceholderContent: _helpers.nodeType,\n  imageProps: _propTypes.default.object,\n  ImageComponent: _propTypes.default.elementType\n};\nAvatarComponent.defaultProps = {\n  showAccessory: false,\n  onAccessoryPress: null,\n  size: 'small',\n  accessory: defaultAccessory,\n  ImageComponent: _reactNative.Image\n};\n\nvar Avatar = _react.default.memo(AvatarComponent, _lodash.default);\n\nexports.Avatar = Avatar;\n\nvar _default = (0, _config.withTheme)(Avatar, 'Avatar');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/node_modules/react-native-elements/src/avatar/Avatar.js"],"names":["avatarSizes","small","medium","large","xlarge","defaultAccessory","name","type","color","underlayColor","AvatarComponent","onPress","onLongPress","Component","TouchableOpacity","View","containerStyle","icon","iconStyle","source","size","avatarStyle","rounded","title","titleStyle","overlayContainerStyle","showAccessory","passedAccessory","accessory","onAccessoryPress","imageProps","placeholderStyle","renderPlaceholderContent","ImageComponent","attributes","width","height","titleSize","iconSize","accessorySize","Utils","StyleSheet","flatten","styles","borderRadius","style","PlaceholderContent","undefined","fontSize","hidePlaceholder","container","backgroundColor","overlayContainer","overflow","avatar","create","flex","textAlign","position","bottom","right","alignItems","justifyContent","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowRadius","shadowOpacity","propTypes","PropTypes","oneOf","TouchableHighlight","TouchableNativeFeedback","TouchableWithoutFeedback","func","oneOfType","object","array","ImageSourceType","bool","string","activeOpacity","number","shape","nodeType","elementType","defaultProps","RNImage","Avatar","React","memo","isEqual"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAWA;;AAEA;;AACA;;AAEA;;AACA;;;;;;;;;AAEA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE,EAFU;AAGlBC,EAAAA,KAAK,EAAE,EAHW;AAIlBC,EAAAA,MAAM,EAAE;AAJU,CAApB;AAOA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE,WADiB;AAEvBC,EAAAA,IAAI,EAAE,UAFiB;AAGvBC,EAAAA,KAAK,EAAE,MAHgB;AAIvBC,EAAAA,aAAa,EAAE;AAJQ,CAAzB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAsBlB;AAAA,MArBJC,OAqBI,QArBJA,OAqBI;AAAA,MApBJC,WAoBI,QApBJA,WAoBI;AAAA,4BAnBJC,SAmBI;AAAA,MAnBJA,SAmBI,+BAnBQF,OAAO,IAAIC,WAAX,GAAyBE,6BAAzB,GAA4CC,iBAmBpD;AAAA,MAlBJC,cAkBI,QAlBJA,cAkBI;AAAA,MAjBJC,IAiBI,QAjBJA,IAiBI;AAAA,MAhBJC,SAgBI,QAhBJA,SAgBI;AAAA,MAfJC,MAeI,QAfJA,MAeI;AAAA,MAdJC,IAcI,QAdJA,IAcI;AAAA,MAbJC,WAaI,QAbJA,WAaI;AAAA,MAZJC,OAYI,QAZJA,OAYI;AAAA,MAXJC,KAWI,QAXJA,KAWI;AAAA,MAVJC,UAUI,QAVJA,UAUI;AAAA,MATJC,qBASI,QATJA,qBASI;AAAA,MARJC,aAQI,QARJA,aAQI;AAAA,MAPOC,eAOP,QAPJC,SAOI;AAAA,MANJC,gBAMI,QANJA,gBAMI;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,gBAII,QAJJA,gBAII;AAAA,MAHJC,wBAGI,QAHJA,wBAGI;AAAA,MAFJC,cAEI,QAFJA,cAEI;AAAA,MADDC,UACC;AACJ,MAAMC,KAAK,GACT,OAAOf,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCpB,WAAW,CAACoB,IAAD,CAAX,IAAqBpB,WAAW,CAACC,KADrE;AAEA,MAAMmC,MAAM,GAAGD,KAAf;AACA,MAAME,SAAS,GAAGF,KAAK,GAAG,CAA1B;AACA,MAAMG,QAAQ,GAAGH,KAAK,GAAG,CAAzB;;AAEA,MAAMP,SAAS,mCACVvB,gBADU,GAEVsB,eAFU,CAAf;;AAIA,MAAMY,aAAa,GAAGX,SAAS,CAACR,IAAV,IAAkB,CAACe,KAAK,GAAGC,MAAT,IAAmB,CAAnB,GAAuB,CAA/D;;AAEA,MAAMI,KAAK,GAAGd,aAAa,IACzB,6BAAC,+BAAD;AACE,IAAA,KAAK,EAAEe,wBAAWC,OAAX,CAAmB,CACxBC,MAAM,CAACf,SADiB,EAExB;AACEO,MAAAA,KAAK,EAAEI,aADT;AAEEH,MAAAA,MAAM,EAAEG,aAFV;AAGEK,MAAAA,YAAY,EAAEL,aAAa,GAAG;AAHhC,KAFwB,EAOxBX,SAAS,CAACiB,KAPc,CAAnB,CADT;AAUE,IAAA,aAAa,EAAEjB,SAAS,CAACnB,aAV3B;AAWE,IAAA,OAAO,EAAEoB,gBAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,YAAYD,SAAZ,GACC,6BAAC,cAAD;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,KAAK,EAAEI,aADF;AAELH,MAAAA,MAAM,EAAEG,aAFH;AAGLK,MAAAA,YAAY,EAAEL,aAAa,GAAG;AAHzB;AADT,KAMMX,SANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,GAUC,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAEW,aAAa,GAAG;AAA5B,KAAqCX,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXJ,CAbF,CADF;;AA+BA,MAAMkB,kBAAkB,GACrBd,wBAAwB,IACvB,yBAAWe,SAAX,EAAsBf,wBAAtB,CADF,IAECT,KAAK,IACJ,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAEkB,wBAAWC,OAAX,CAAmB,CACxBC,MAAM,CAACpB,KADiB,EAExB;AAAEyB,MAAAA,QAAQ,EAAEX;AAAZ,KAFwB,EAGxBb,UAHwB,CAAnB,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGD,KAPH,CAHF,IAaCN,IAAI,IACH,6BAAC,aAAD;AACE,IAAA,KAAK,EAAEC,SAAS,IAAIA,SADtB;AAEE,IAAA,KAAK,EAAED,IAAI,CAACT,KAAL,IAAc,OAFvB;AAGE,IAAA,IAAI,EAAES,IAAI,CAACX,IAAL,IAAa,MAHrB;AAIE,IAAA,IAAI,EAAEW,IAAI,CAACG,IAAL,IAAakB,QAJrB;AAKE,IAAA,IAAI,EAAErB,IAAI,CAACV,IAAL,IAAaU,IAAI,CAACV,IAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ;;AAyBA,MAAM0C,eAAe,GAAG,CAAC9B,MAAzB;AAEA,SACE,6BAAC,SAAD;AACE,IAAA,OAAO,EAAER,OADX;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,KAAK,EAAE6B,wBAAWC,OAAX,CAAmB,CACxBC,MAAM,CAACO,SADiB,EAExB;AAAEd,MAAAA,MAAM,EAANA,MAAF;AAAUD,MAAAA,KAAK,EAALA;AAAV,KAFwB,EAGxBb,OAAO,IAAI;AAAEsB,MAAAA,YAAY,EAAET,KAAK,GAAG;AAAxB,KAHa,EAIxBnB,cAJwB,CAAnB;AAHT,KASMkB,UATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWE,6BAAC,cAAD;AACE,IAAA,gBAAgB,EAAEO,wBAAWC,OAAX,CAAmB,CACnCX,gBADmC,EAEnCkB,eAAe,IAAI;AAAEE,MAAAA,eAAe,EAAE;AAAnB,KAFgB,CAAnB,CADpB;AAKE,IAAA,kBAAkB,EAAEL,kBALtB;AAME,IAAA,cAAc,EAAEL,wBAAWC,OAAX,CAAmB,CACjCC,MAAM,CAACS,gBAD0B,EAEjC9B,OAAO,IAAI;AAAEsB,MAAAA,YAAY,EAAET,KAAK,GAAG,CAAxB;AAA2BkB,MAAAA,QAAQ,EAAE;AAArC,KAFsB,EAGjC5B,qBAHiC,CAAnB,CANlB;AAWE,IAAA,MAAM,EAAEN,MAXV;AAYE,IAAA,YAAY,EAAEG,OAAO,GAAGa,KAAK,GAAG,CAAX,GAAeY;AAZtC,KAaMjB,UAbN;AAcE,IAAA,KAAK,EAAEW,wBAAWC,OAAX,CAAmB,CACxBC,MAAM,CAACW,MADiB,EAExBxB,UAAU,IAAIA,UAAU,CAACe,KAFD,EAGxBxB,WAHwB,CAAnB,CAdT;AAmBE,IAAA,cAAc,EAAEY,cAnBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXF,EAgCGO,KAhCH,CADF;AAoCD,CAjID;;AAmIA,IAAMG,MAAM,GAAGF,wBAAWc,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAAE;AADR,GADoB;AAI/BG,EAAAA,MAAM,EAAE;AACNE,IAAAA,IAAI,EAAE,CADA;AAENrB,IAAAA,KAAK,EAAE,IAFD;AAGNC,IAAAA,MAAM,EAAE;AAHF,GAJuB;AAS/BgB,EAAAA,gBAAgB,EAAE;AAChBI,IAAAA,IAAI,EAAE;AADU,GATa;AAY/BjC,EAAAA,KAAK,EAAE;AACLf,IAAAA,KAAK,EAAE,SADF;AAEL2C,IAAAA,eAAe,EAAE,aAFZ;AAGLM,IAAAA,SAAS,EAAE;AAHN,GAZwB;AAiB/B7B,EAAAA,SAAS;AACP8B,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,MAAM,EAAE,CAFD;AAGPC,IAAAA,KAAK,EAAE,CAHA;AAIPC,IAAAA,UAAU,EAAE,QAJL;AAKPC,IAAAA,cAAc,EAAE,QALT;AAMPX,IAAAA,eAAe,EAAE;AANV,KAOJY,sBAASC,MAAT,CAAgB;AACjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ,KADQ;AAIjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE,MADN;AAEPC,MAAAA,YAAY,EAAE;AAAElC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFP;AAGPkC,MAAAA,YAAY,EAAE,CAHP;AAIPC,MAAAA,aAAa,EAAE;AAJR;AAJQ,GAAhB,CAPI;AAjBsB,CAAlB,CAAf;;AAsCA7D,eAAe,CAAC8D,SAAhB,GAA4B;AAC1B3D,EAAAA,SAAS,EAAE4D,mBAAUC,KAAV,CAAgB,CACzB3D,iBADyB,EAEzBD,6BAFyB,EAGzB6D,+BAHyB,EAIzBC,oCAJyB,EAKzBC,qCALyB,CAAhB,CADe;AAQ1BlE,EAAAA,OAAO,EAAE8D,mBAAUK,IARO;AAS1BlE,EAAAA,WAAW,EAAE6D,mBAAUK,IATG;AAU1B9D,EAAAA,cAAc,EAAEyD,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB,CAVU;AAW1B9D,EAAAA,MAAM,EAAE+D,wBAXkB;AAY1B7D,EAAAA,WAAW,EAAEoD,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB,CAZa;AAa1B3D,EAAAA,OAAO,EAAEmD,mBAAUU,IAbO;AAc1B5D,EAAAA,KAAK,EAAEkD,mBAAUW,MAdS;AAe1B5D,EAAAA,UAAU,EAAEiD,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB,CAfc;AAgB1BxD,EAAAA,qBAAqB,EAAEgD,mBAAUM,SAAV,CAAoB,CACzCN,mBAAUO,MAD+B,EAEzCP,mBAAUQ,KAF+B,CAApB,CAhBG;AAoB1BI,EAAAA,aAAa,EAAEZ,mBAAUa,MApBC;AAqB1BrE,EAAAA,IAAI,EAAEwD,mBAAUO,MArBU;AAsB1B9D,EAAAA,SAAS,EAAEuD,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB,CAtBe;AAuB1B7D,EAAAA,IAAI,EAAEqD,mBAAUM,SAAV,CAAoB,CACxBN,mBAAUC,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,CAAhB,CADwB,EAExBD,mBAAUa,MAFc,CAApB,CAvBoB;AA2B1B5D,EAAAA,aAAa,EAAE+C,mBAAUU,IA3BC;AA4B1BtD,EAAAA,gBAAgB,EAAE4C,mBAAUK,IA5BF;AA6B1BlD,EAAAA,SAAS,EAAE6C,mBAAUc,KAAV,CAAgB;AACzBnE,IAAAA,IAAI,EAAEqD,mBAAUa,MADS;AAEzBhF,IAAAA,IAAI,EAAEmE,mBAAUW,MAFS;AAGzB7E,IAAAA,IAAI,EAAEkE,mBAAUW,MAHS;AAIzB5E,IAAAA,KAAK,EAAEiE,mBAAUW,MAJQ;AAKzB3E,IAAAA,aAAa,EAAEgE,mBAAUW,MALA;AAMzBvC,IAAAA,KAAK,EAAE4B,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB;AANkB,GAAhB,CA7Be;AAqC1BlD,EAAAA,gBAAgB,EAAE0C,mBAAUM,SAAV,CAAoB,CAACN,mBAAUO,MAAX,EAAmBP,mBAAUQ,KAA7B,CAApB,CArCQ;AAsC1BjD,EAAAA,wBAAwB,EAAEwD,iBAtCA;AAuC1B1D,EAAAA,UAAU,EAAE2C,mBAAUO,MAvCI;AAwC1B/C,EAAAA,cAAc,EAAEwC,mBAAUgB;AAxCA,CAA5B;AA2CA/E,eAAe,CAACgF,YAAhB,GAA+B;AAC7BhE,EAAAA,aAAa,EAAE,KADc;AAE7BG,EAAAA,gBAAgB,EAAE,IAFW;AAG7BT,EAAAA,IAAI,EAAE,OAHuB;AAI7BQ,EAAAA,SAAS,EAAEvB,gBAJkB;AAK7B4B,EAAAA,cAAc,EAAE0D;AALa,CAA/B;;AAQA,IAAMC,MAAM,GAAGC,eAAMC,IAAN,CAAWpF,eAAX,EAA4BqF,eAA5B,CAAf;;;;eAEe,uBAAUH,MAAV,EAAkB,QAAlB,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Text,\n  Image as RNImage,\n  Platform,\n  StyleSheet,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport isEqual from 'lodash.isequal';\n\nimport { withTheme } from '../config';\nimport { renderNode, nodeType, ImageSourceType } from '../helpers';\n\nimport Icon from '../icons/Icon';\nimport Image from '../image/Image';\n\nconst avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150,\n};\n\nconst defaultAccessory = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000',\n};\n\nconst AvatarComponent = ({\n  onPress,\n  onLongPress,\n  Component = onPress || onLongPress ? TouchableOpacity : View,\n  containerStyle,\n  icon,\n  iconStyle,\n  source,\n  size,\n  avatarStyle,\n  rounded,\n  title,\n  titleStyle,\n  overlayContainerStyle,\n  showAccessory,\n  accessory: passedAccessory,\n  onAccessoryPress,\n  imageProps,\n  placeholderStyle,\n  renderPlaceholderContent,\n  ImageComponent,\n  ...attributes\n}) => {\n  const width =\n    typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  const height = width;\n  const titleSize = width / 2;\n  const iconSize = width / 2;\n\n  const accessory = {\n    ...defaultAccessory,\n    ...passedAccessory,\n  };\n  const accessorySize = accessory.size || (width + height) / 2 / 3;\n\n  const Utils = showAccessory && (\n    <TouchableHighlight\n      style={StyleSheet.flatten([\n        styles.accessory,\n        {\n          width: accessorySize,\n          height: accessorySize,\n          borderRadius: accessorySize / 2,\n        },\n        accessory.style,\n      ])}\n      underlayColor={accessory.underlayColor}\n      onPress={onAccessoryPress}\n    >\n      <View>\n        {'source' in accessory ? (\n          <Image\n            style={{\n              width: accessorySize,\n              height: accessorySize,\n              borderRadius: accessorySize / 2,\n            }}\n            {...accessory}\n          />\n        ) : (\n          <Icon size={accessorySize * 0.8} {...accessory} />\n        )}\n      </View>\n    </TouchableHighlight>\n  );\n\n  const PlaceholderContent =\n    (renderPlaceholderContent &&\n      renderNode(undefined, renderPlaceholderContent)) ||\n    (title && (\n      <Text\n        style={StyleSheet.flatten([\n          styles.title,\n          { fontSize: titleSize },\n          titleStyle,\n        ])}\n      >\n        {title}\n      </Text>\n    )) ||\n    (icon && (\n      <Icon\n        style={iconStyle && iconStyle}\n        color={icon.color || 'white'}\n        name={icon.name || 'user'}\n        size={icon.size || iconSize}\n        type={icon.type && icon.type}\n      />\n    ));\n\n  // Remove placeholder styling if we're not using image\n  const hidePlaceholder = !source;\n\n  return (\n    <Component\n      onPress={onPress}\n      onLongPress={onLongPress}\n      style={StyleSheet.flatten([\n        styles.container,\n        { height, width },\n        rounded && { borderRadius: width / 2 },\n        containerStyle,\n      ])}\n      {...attributes}\n    >\n      <Image\n        placeholderStyle={StyleSheet.flatten([\n          placeholderStyle,\n          hidePlaceholder && { backgroundColor: 'transparent' },\n        ])}\n        PlaceholderContent={PlaceholderContent}\n        containerStyle={StyleSheet.flatten([\n          styles.overlayContainer,\n          rounded && { borderRadius: width / 2, overflow: 'hidden' },\n          overlayContainerStyle,\n        ])}\n        source={source}\n        borderRadius={rounded ? width / 2 : undefined}\n        {...imageProps}\n        style={StyleSheet.flatten([\n          styles.avatar,\n          imageProps && imageProps.style,\n          avatarStyle,\n        ])}\n        ImageComponent={ImageComponent}\n      />\n      {Utils}\n    </Component>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null,\n  },\n  overlayContainer: {\n    flex: 1,\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n  },\n  accessory: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa',\n    ...Platform.select({\n      android: {\n        elevation: 1,\n      },\n      default: {\n        shadowColor: '#000',\n        shadowOffset: { width: 1, height: 1 },\n        shadowRadius: 2,\n        shadowOpacity: 0.5,\n      },\n    }),\n  },\n});\n\nAvatarComponent.propTypes = {\n  Component: PropTypes.oneOf([\n    View,\n    TouchableOpacity,\n    TouchableHighlight,\n    TouchableNativeFeedback,\n    TouchableWithoutFeedback,\n  ]),\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  source: ImageSourceType,\n  avatarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  overlayContainerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']),\n    PropTypes.number,\n  ]),\n  showAccessory: PropTypes.bool,\n  onAccessoryPress: PropTypes.func,\n  accessory: PropTypes.shape({\n    size: PropTypes.number,\n    name: PropTypes.string,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    underlayColor: PropTypes.string,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  }),\n  placeholderStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  renderPlaceholderContent: nodeType,\n  imageProps: PropTypes.object,\n  ImageComponent: PropTypes.elementType,\n};\n\nAvatarComponent.defaultProps = {\n  showAccessory: false,\n  onAccessoryPress: null,\n  size: 'small',\n  accessory: defaultAccessory,\n  ImageComponent: RNImage,\n};\n\nconst Avatar = React.memo(AvatarComponent, isEqual);\nexport { Avatar };\nexport default withTheme(Avatar, 'Avatar');\n"]},"metadata":{},"sourceType":"script"}