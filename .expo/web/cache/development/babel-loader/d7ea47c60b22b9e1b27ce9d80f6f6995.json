{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Layout = _interopRequireDefault(require(\"../constants/Layout\"));\n\nvar ASPECT_RATIO = _Layout.default.window.width / _Layout.default.window.height;\nvar LATITUDE_DELTA = 0.005;\nvar LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\nvar DEFAULT_LOCATION = {\n  latitude: 10.7978598,\n  longitude: 106.685739,\n  latitudeDelta: LATITUDE_DELTA,\n  longitudeDelta: LONGITUDE_DELTA\n};\nvar _default = {\n  ASPECT_RATIO: ASPECT_RATIO,\n  DEFAULT_LOCATION: DEFAULT_LOCATION,\n  getLongitudeDelta: function getLongitudeDelta(latitudeDelta) {\n    return latitudeDelta * ASPECT_RATIO;\n  },\n  getRegionForCoordinates: function getRegionForCoordinates(points) {\n    var clearing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.005;\n    var minX, maxX, minY, maxY;\n    console.log('Points', points);\n    minX = points[0].latitude;\n    maxX = points[0].latitude;\n    minY = points[0].longitude;\n    maxY = points[0].longitude;\n    points.map(function (point) {\n      minX = Math.min(minX, point.latitude);\n      maxX = Math.max(maxX, point.latitude);\n      minY = Math.min(minY, point.longitude);\n      maxY = Math.max(maxY, point.longitude);\n    });\n    var midX = (minX + maxX) / 2;\n    var midY = (minY + maxY) / 2;\n    var deltaX = maxX - minX + clearing;\n    var deltaY = maxY - minY + clearing;\n    return {\n      latitude: midX,\n      longitude: midY,\n      latitudeDelta: deltaX,\n      longitudeDelta: deltaY\n    };\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/utils/MapUtils.js"],"names":["ASPECT_RATIO","Layout","window","width","height","LATITUDE_DELTA","LONGITUDE_DELTA","DEFAULT_LOCATION","latitude","longitude","latitudeDelta","longitudeDelta","getLongitudeDelta","getRegionForCoordinates","points","clearing","minX","maxX","minY","maxY","console","log","map","point","Math","min","max","midX","midY","deltaX","deltaY"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,YAAY,GAAGC,gBAAOC,MAAP,CAAcC,KAAd,GAAsBF,gBAAOC,MAAP,CAAcE,MAAzD;AACA,IAAMC,cAAc,GAAG,KAAvB;AACA,IAAMC,eAAe,GAAGD,cAAc,GAAGL,YAAzC;AACA,IAAMO,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,UADa;AAEvBC,EAAAA,SAAS,EAAE,UAFY;AAGvBC,EAAAA,aAAa,EAAEL,cAHQ;AAIvBM,EAAAA,cAAc,EAAEL;AAJO,CAAzB;eAOe;AACbN,EAAAA,YAAY,EAAZA,YADa;AAEbO,EAAAA,gBAAgB,EAAhBA,gBAFa;AAGbK,EAAAA,iBAAiB,EAAE,2BAAAF,aAAa;AAAA,WAAIA,aAAa,GAAGV,YAApB;AAAA,GAHnB;AAIba,EAAAA,uBAAuB,EAAE,iCAACC,MAAD,EAA8B;AAAA,QAArBC,QAAqB,uEAAV,KAAU;AAErD,QAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,MAAtB;AACAE,IAAAA,IAAI,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUN,QAAjB;AACAS,IAAAA,IAAI,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUN,QAAjB;AACAU,IAAAA,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUL,SAAjB;AACAU,IAAAA,IAAI,GAAGL,MAAM,CAAC,CAAD,CAAN,CAAUL,SAAjB;AAEAK,IAAAA,MAAM,CAACQ,GAAP,CAAW,UAAAC,KAAK,EAAI;AAClBP,MAAAA,IAAI,GAAGQ,IAAI,CAACC,GAAL,CAAST,IAAT,EAAeO,KAAK,CAACf,QAArB,CAAP;AACAS,MAAAA,IAAI,GAAGO,IAAI,CAACE,GAAL,CAAST,IAAT,EAAeM,KAAK,CAACf,QAArB,CAAP;AACAU,MAAAA,IAAI,GAAGM,IAAI,CAACC,GAAL,CAASP,IAAT,EAAeK,KAAK,CAACd,SAArB,CAAP;AACAU,MAAAA,IAAI,GAAGK,IAAI,CAACE,GAAL,CAASP,IAAT,EAAeI,KAAK,CAACd,SAArB,CAAP;AACD,KALD;AAOA,QAAMkB,IAAI,GAAG,CAACX,IAAI,GAAGC,IAAR,IAAgB,CAA7B;AACA,QAAMW,IAAI,GAAG,CAACV,IAAI,GAAGC,IAAR,IAAgB,CAA7B;AACA,QAAMU,MAAM,GAAGZ,IAAI,GAAGD,IAAP,GAAcD,QAA7B;AACA,QAAMe,MAAM,GAAGX,IAAI,GAAGD,IAAP,GAAcH,QAA7B;AAEA,WAAO;AACLP,MAAAA,QAAQ,EAAEmB,IADL;AAELlB,MAAAA,SAAS,EAAEmB,IAFN;AAGLlB,MAAAA,aAAa,EAAEmB,MAHV;AAILlB,MAAAA,cAAc,EAAEmB;AAJX,KAAP;AAMD;AA/BY,C","sourcesContent":["import Layout from '../constants/Layout';\r\n\r\nconst ASPECT_RATIO = Layout.window.width / Layout.window.height;\r\nconst LATITUDE_DELTA = 0.005;\r\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\r\nconst DEFAULT_LOCATION = {\r\n  latitude: 10.7978598,\r\n  longitude: 106.685739,\r\n  latitudeDelta: LATITUDE_DELTA,\r\n  longitudeDelta: LONGITUDE_DELTA,\r\n};\r\n\r\nexport default {\r\n  ASPECT_RATIO,\r\n  DEFAULT_LOCATION,\r\n  getLongitudeDelta: latitudeDelta => latitudeDelta * ASPECT_RATIO,\r\n  getRegionForCoordinates: (points, clearing = 0.005) => {\r\n    // points should be an array of { latitude: X, longitude: Y }\r\n    let minX, maxX, minY, maxY;\r\n    console.log('Points', points);\r\n    minX = points[0].latitude;\r\n    maxX = points[0].latitude;\r\n    minY = points[0].longitude;\r\n    maxY = points[0].longitude;\r\n    // calculate rect\r\n    points.map(point => {\r\n      minX = Math.min(minX, point.latitude);\r\n      maxX = Math.max(maxX, point.latitude);\r\n      minY = Math.min(minY, point.longitude);\r\n      maxY = Math.max(maxY, point.longitude);\r\n    });\r\n\r\n    const midX = (minX + maxX) / 2;\r\n    const midY = (minY + maxY) / 2;\r\n    const deltaX = maxX - minX + clearing;\r\n    const deltaY = maxY - minY + clearing;\r\n\r\n    return {\r\n      latitude: midX,\r\n      longitude: midY,\r\n      latitudeDelta: deltaX,\r\n      longitudeDelta: deltaY,\r\n    };\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"script"}