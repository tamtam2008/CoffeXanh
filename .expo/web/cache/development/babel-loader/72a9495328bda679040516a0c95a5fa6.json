{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firebase = exports.default = exports.SDK_VERSION = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _internal = require(\"@react-native-firebase/app/lib/internal\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _remoteMessageOptions = _interopRequireDefault(require(\"./remoteMessageOptions\"));\n\nvar _version = _interopRequireDefault(require(\"./version\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar statics = {\n  AuthorizationStatus: {\n    NOT_DETERMINED: -1,\n    DENIED: 0,\n    AUTHORIZED: 1,\n    PROVISIONAL: 2\n  },\n  NotificationAndroidPriority: {\n    PRIORITY_LOW: -1,\n    PRIORITY_DEFAULT: 0,\n    PRIORITY_HIGH: 1,\n    PRIORITY_MAX: 2\n  },\n  NotificationAndroidVisibility: {\n    VISIBILITY_SECRET: -1,\n    VISIBILITY_PRIVATE: 0,\n    VISIBILITY_PUBLIC: 1\n  }\n};\nvar namespace = 'messaging';\nvar nativeModuleName = 'RNFBMessagingModule';\nvar backgroundMessageHandler;\n\nvar FirebaseMessagingModule = function (_FirebaseModule) {\n  (0, _inherits2.default)(FirebaseMessagingModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseMessagingModule);\n\n  function FirebaseMessagingModule() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, FirebaseMessagingModule);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._isAutoInitEnabled = _this.native.isAutoInitEnabled != null ? _this.native.isAutoInitEnabled : true;\n    _this._isRegisteredForRemoteNotifications = _this.native.isRegisteredForRemoteNotifications != null ? _this.native.isRegisteredForRemoteNotifications : true;\n\n    _reactNative.AppRegistry.registerHeadlessTask('ReactNativeFirebaseMessagingHeadlessTask', function () {\n      if (!backgroundMessageHandler) {\n        console.warn('No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.');\n        return function () {\n          return Promise.resolve();\n        };\n      }\n\n      return function (remoteMessage) {\n        return backgroundMessageHandler(remoteMessage);\n      };\n    });\n\n    if (_common.isIOS) {\n      _this.emitter.addListener('messaging_message_received_background', function (remoteMessage) {\n        if (!backgroundMessageHandler) {\n          console.warn('No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.');\n          return Promise.resolve();\n        }\n\n        return backgroundMessageHandler(remoteMessage);\n      });\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(FirebaseMessagingModule, [{\n    key: \"setAutoInitEnabled\",\n    value: function setAutoInitEnabled(enabled) {\n      if (!(0, _common.isBoolean)(enabled)) {\n        throw new Error(\"firebase.messaging().setAutoInitEnabled(*) 'enabled' expected a boolean value.\");\n      }\n\n      this._isAutoInitEnabled = enabled;\n      return this.native.setAutoInitEnabled(enabled);\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      return this.native.getInitialNotification();\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken(authorizedEntity, scope) {\n      if (!(0, _common.isUndefined)(authorizedEntity) && !(0, _common.isString)(authorizedEntity)) {\n        throw new Error(\"firebase.messaging().getToken(*) 'authorizedEntity' expected a string value.\");\n      }\n\n      if (!(0, _common.isUndefined)(scope) && !(0, _common.isString)(scope)) {\n        throw new Error(\"firebase.messaging().getToken(_, *) 'scope' expected a string value.\");\n      }\n\n      return this.native.getToken(authorizedEntity || this.app.options.messagingSenderId, scope || 'FCM');\n    }\n  }, {\n    key: \"deleteToken\",\n    value: function deleteToken(authorizedEntity, scope) {\n      if (!(0, _common.isUndefined)(authorizedEntity) && !(0, _common.isString)(authorizedEntity)) {\n        throw new Error(\"firebase.messaging().deleteToken(*) 'authorizedEntity' expected a string value.\");\n      }\n\n      if (!(0, _common.isUndefined)(scope) && !(0, _common.isString)(scope)) {\n        throw new Error(\"firebase.messaging().deleteToken(_, *) 'scope' expected a string value.\");\n      }\n\n      return this.native.deleteToken(authorizedEntity || this.app.options.messagingSenderId, scope || 'FCM');\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onMessage(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_message_received', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onNotificationOpenedApp\",\n    value: function onNotificationOpenedApp(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onNotificationOpenedApp(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_notification_opened', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onTokenRefresh\",\n    value: function onTokenRefresh(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onTokenRefresh(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_token_refresh', function (event) {\n        var token = event.token;\n        listener(token);\n      });\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"requestPermission\",\n    value: function requestPermission(permissions) {\n      if (_common.isAndroid) {\n        return Promise.resolve(1);\n      }\n\n      var defaultPermissions = {\n        alert: true,\n        announcement: false,\n        badge: true,\n        carPlay: true,\n        provisional: false,\n        sound: true,\n        criticalAlert: false\n      };\n\n      if (!permissions) {\n        return this.native.requestPermission(defaultPermissions);\n      }\n\n      if (!(0, _common.isObject)(permissions)) {\n        throw new Error('firebase.messaging().requestPermission(*) expected an object value.');\n      }\n\n      Object.entries(permissions).forEach(function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (!(0, _common.hasOwnProperty)(defaultPermissions, key)) {\n          throw new Error(\"firebase.messaging().requestPermission(*) unexpected key \\\"\" + key + \"\\\" provided to permissions object.\");\n        }\n\n        if (!(0, _common.isBoolean)(value)) {\n          throw new Error(\"firebase.messaging().requestPermission(*) the permission \\\"\" + key + \"\\\" expected a boolean value.\");\n        }\n\n        defaultPermissions[key] = value;\n      });\n      return this.native.requestPermission(defaultPermissions);\n    }\n  }, {\n    key: \"registerDeviceForRemoteMessages\",\n    value: function registerDeviceForRemoteMessages() {\n      if (_common.isAndroid) {\n        return Promise.resolve();\n      }\n\n      var autoRegister = this.firebaseJson['messaging_ios_auto_register_for_remote_messages'];\n\n      if (autoRegister === undefined || autoRegister === true) {\n        console.warn(\"Usage of \\\"messaging().registerDeviceForRemoteMessages()\\\" is not required. You only need to register if auto-registration is disabled in your 'firebase.json' configuration file via the 'messaging_ios_auto_register_for_remote_messages' property.\");\n      }\n\n      this._isRegisteredForRemoteNotifications = true;\n      return this.native.registerForRemoteNotifications();\n    }\n  }, {\n    key: \"registerForRemoteNotifications\",\n    value: function registerForRemoteNotifications() {\n      console.warn('[deprecation] Usage of \"registerForRemoteNotifications\" will be removed in v7. Use \"registerDeviceForRemoteMessages\" instead.');\n      return this.registerDeviceForRemoteMessages();\n    }\n  }, {\n    key: \"unregisterDeviceForRemoteMessages\",\n    value: function unregisterDeviceForRemoteMessages() {\n      if (_common.isAndroid) {\n        return Promise.resolve();\n      }\n\n      this._isRegisteredForRemoteNotifications = false;\n      return this.native.unregisterForRemoteNotifications();\n    }\n  }, {\n    key: \"unregisterForRemoteNotifications\",\n    value: function unregisterForRemoteNotifications() {\n      console.warn('[deprecation] Usage of \"unregisterForRemoteNotifications\" will be removed in v7. Use \"unregisterDeviceForRemoteMessages\" instead.');\n      return this.unregisterDeviceForRemoteMessages();\n    }\n  }, {\n    key: \"getAPNSToken\",\n    value: function getAPNSToken() {\n      if (_common.isAndroid) {\n        return Promise.resolve(null);\n      }\n\n      return this.native.getAPNSToken();\n    }\n  }, {\n    key: \"hasPermission\",\n    value: function hasPermission() {\n      return this.native.hasPermission();\n    }\n  }, {\n    key: \"onDeletedMessages\",\n    value: function onDeletedMessages(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onDeletedMessages(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_message_deleted', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onMessageSent\",\n    value: function onMessageSent(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onMessageSent(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_message_sent', listener);\n      return function () {\n        subscription.remove();\n      };\n    }\n  }, {\n    key: \"onSendError\",\n    value: function onSendError(listener) {\n      if (!(0, _common.isFunction)(listener)) {\n        throw new Error(\"firebase.messaging().onSendError(*) 'listener' expected a function.\");\n      }\n\n      var subscription = this.emitter.addListener('messaging_message_send_error', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"setBackgroundMessageHandler\",\n    value: function setBackgroundMessageHandler(handler) {\n      if (!(0, _common.isFunction)(handler)) {\n        throw new Error(\"firebase.messaging().setBackgroundMessageHandler(*) 'handler' expected a function.\");\n      }\n\n      backgroundMessageHandler = handler;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(remoteMessage) {\n      var options;\n\n      try {\n        options = (0, _remoteMessageOptions.default)(this.app.options.messagingSenderId, remoteMessage);\n      } catch (e) {\n        throw new Error(\"firebase.messaging().sendMessage(*) \" + e.message + \".\");\n      }\n\n      return this.native.sendMessage(options);\n    }\n  }, {\n    key: \"subscribeToTopic\",\n    value: function subscribeToTopic(topic) {\n      if (!(0, _common.isString)(topic)) {\n        throw new Error(\"firebase.messaging().subscribeToTopic(*) 'topic' expected a string value.\");\n      }\n\n      if (topic.indexOf('/') > -1) {\n        throw new Error('firebase.messaging().subscribeToTopic(*) \\'topic\\' must not include \"/\".');\n      }\n\n      return this.native.subscribeToTopic(topic);\n    }\n  }, {\n    key: \"unsubscribeFromTopic\",\n    value: function unsubscribeFromTopic(topic) {\n      if (!(0, _common.isString)(topic)) {\n        throw new Error(\"firebase.messaging().unsubscribeFromTopic(*) 'topic' expected a string value.\");\n      }\n\n      if (topic.indexOf('/') > -1) {\n        throw new Error('firebase.messaging().unsubscribeFromTopic(*) \\'topic\\' must not include \"/\".');\n      }\n\n      return this.native.unsubscribeFromTopic(topic);\n    }\n  }, {\n    key: \"useServiceWorker\",\n    value: function useServiceWorker() {\n      console.warn('firebase.messaging().useServiceWorker() is not supported on react-native-firebase.');\n    }\n  }, {\n    key: \"usePublicVapidKey\",\n    value: function usePublicVapidKey() {\n      console.warn('firebase.messaging().usePublicVapidKey() is not supported on react-native-firebase.');\n    }\n  }, {\n    key: \"isAutoInitEnabled\",\n    get: function get() {\n      return this._isAutoInitEnabled;\n    }\n  }, {\n    key: \"isDeviceRegisteredForRemoteMessages\",\n    get: function get() {\n      if (_common.isAndroid) {\n        return true;\n      }\n\n      return this._isRegisteredForRemoteNotifications;\n    }\n  }, {\n    key: \"isRegisteredForRemoteNotifications\",\n    get: function get() {\n      console.warn('[deprecation] Usage of \"isRegisteredForRemoteNotifications\" will be deprecated in v7. Use \"isDeviceRegisteredForRemoteMessages\" instead.');\n      return this.isDeviceRegisteredForRemoteMessages;\n    }\n  }]);\n  return FirebaseMessagingModule;\n}(_internal.FirebaseModule);\n\nvar SDK_VERSION = _version.default;\nexports.SDK_VERSION = SDK_VERSION;\n\nvar _default = (0, _internal.createModuleNamespace)({\n  statics: statics,\n  version: _version.default,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['messaging_token_refresh', 'messaging_message_sent', 'messaging_message_deleted', 'messaging_message_received', 'messaging_message_send_error', 'messaging_notification_opened'].concat((0, _toConsumableArray2.default)(_common.isIOS ? ['messaging_message_received_background'] : [])),\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseMessagingModule\n});\n\nexports.default = _default;\nvar firebase = (0, _internal.getFirebaseRoot)();\nexports.firebase = firebase;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/node_modules/@react-native-firebase/messaging/lib/index.js"],"names":["statics","AuthorizationStatus","NOT_DETERMINED","DENIED","AUTHORIZED","PROVISIONAL","NotificationAndroidPriority","PRIORITY_LOW","PRIORITY_DEFAULT","PRIORITY_HIGH","PRIORITY_MAX","NotificationAndroidVisibility","VISIBILITY_SECRET","VISIBILITY_PRIVATE","VISIBILITY_PUBLIC","namespace","nativeModuleName","backgroundMessageHandler","FirebaseMessagingModule","args","_isAutoInitEnabled","native","isAutoInitEnabled","_isRegisteredForRemoteNotifications","isRegisteredForRemoteNotifications","AppRegistry","registerHeadlessTask","console","warn","Promise","resolve","remoteMessage","isIOS","emitter","addListener","enabled","Error","setAutoInitEnabled","getInitialNotification","authorizedEntity","scope","getToken","app","options","messagingSenderId","deleteToken","listener","subscription","remove","event","token","permissions","isAndroid","defaultPermissions","alert","announcement","badge","carPlay","provisional","sound","criticalAlert","requestPermission","Object","entries","forEach","key","value","autoRegister","firebaseJson","undefined","registerForRemoteNotifications","registerDeviceForRemoteMessages","unregisterForRemoteNotifications","unregisterDeviceForRemoteMessages","getAPNSToken","hasPermission","handler","e","message","sendMessage","topic","indexOf","subscribeToTopic","unsubscribeFromTopic","isDeviceRegisteredForRemoteMessages","FirebaseModule","SDK_VERSION","version","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  hasOwnProperty,\n  isAndroid,\n  isBoolean,\n  isFunction,\n  isIOS,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport { AppRegistry } from 'react-native';\nimport remoteMessageOptions from './remoteMessageOptions';\nimport version from './version';\n\nconst statics = {\n  AuthorizationStatus: {\n    NOT_DETERMINED: -1,\n    DENIED: 0,\n    AUTHORIZED: 1,\n    PROVISIONAL: 2,\n  },\n  NotificationAndroidPriority: {\n    PRIORITY_LOW: -1,\n    PRIORITY_DEFAULT: 0,\n    PRIORITY_HIGH: 1,\n    PRIORITY_MAX: 2,\n  },\n  NotificationAndroidVisibility: {\n    VISIBILITY_SECRET: -1,\n    VISIBILITY_PRIVATE: 0,\n    VISIBILITY_PUBLIC: 1,\n  },\n};\n\nconst namespace = 'messaging';\n\nconst nativeModuleName = 'RNFBMessagingModule';\n\nlet backgroundMessageHandler;\n\nclass FirebaseMessagingModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._isAutoInitEnabled =\n      this.native.isAutoInitEnabled != null ? this.native.isAutoInitEnabled : true;\n    this._isRegisteredForRemoteNotifications =\n      this.native.isRegisteredForRemoteNotifications != null\n        ? this.native.isRegisteredForRemoteNotifications\n        : true;\n\n    AppRegistry.registerHeadlessTask('ReactNativeFirebaseMessagingHeadlessTask', () => {\n      if (!backgroundMessageHandler) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.',\n        );\n        return () => Promise.resolve();\n      }\n      return remoteMessage => backgroundMessageHandler(remoteMessage);\n    });\n\n    if (isIOS) {\n      this.emitter.addListener('messaging_message_received_background', remoteMessage => {\n        if (!backgroundMessageHandler) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.',\n          );\n          return Promise.resolve();\n        }\n\n        return backgroundMessageHandler(remoteMessage);\n      });\n    }\n  }\n\n  get isAutoInitEnabled() {\n    return this._isAutoInitEnabled;\n  }\n\n  /**\n   * @ios\n   */\n  get isDeviceRegisteredForRemoteMessages() {\n    if (isAndroid) {\n      return true;\n    }\n\n    return this._isRegisteredForRemoteNotifications;\n  }\n\n  /**\n   * @platform ios\n   * @deprecated Use isDeviceRegisteredForRemoteMessages.\n   */\n  get isRegisteredForRemoteNotifications() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[deprecation] Usage of \"isRegisteredForRemoteNotifications\" will be deprecated in v7. Use \"isDeviceRegisteredForRemoteMessages\" instead.',\n    );\n    return this.isDeviceRegisteredForRemoteMessages;\n  }\n\n  setAutoInitEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.messaging().setAutoInitEnabled(*) 'enabled' expected a boolean value.\",\n      );\n    }\n\n    this._isAutoInitEnabled = enabled;\n    return this.native.setAutoInitEnabled(enabled);\n  }\n\n  getInitialNotification() {\n    return this.native.getInitialNotification();\n  }\n\n  getToken(authorizedEntity, scope) {\n    if (!isUndefined(authorizedEntity) && !isString(authorizedEntity)) {\n      throw new Error(\n        \"firebase.messaging().getToken(*) 'authorizedEntity' expected a string value.\",\n      );\n    }\n\n    if (!isUndefined(scope) && !isString(scope)) {\n      throw new Error(\"firebase.messaging().getToken(_, *) 'scope' expected a string value.\");\n    }\n\n    return this.native.getToken(\n      authorizedEntity || this.app.options.messagingSenderId,\n      scope || 'FCM',\n    );\n  }\n\n  deleteToken(authorizedEntity, scope) {\n    if (!isUndefined(authorizedEntity) && !isString(authorizedEntity)) {\n      throw new Error(\n        \"firebase.messaging().deleteToken(*) 'authorizedEntity' expected a string value.\",\n      );\n    }\n\n    if (!isUndefined(scope) && !isString(scope)) {\n      throw new Error(\"firebase.messaging().deleteToken(_, *) 'scope' expected a string value.\");\n    }\n\n    return this.native.deleteToken(\n      authorizedEntity || this.app.options.messagingSenderId,\n      scope || 'FCM',\n    );\n  }\n\n  onMessage(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onMessage(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_received', listener);\n    return () => subscription.remove();\n  }\n\n  onNotificationOpenedApp(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\n        \"firebase.messaging().onNotificationOpenedApp(*) 'listener' expected a function.\",\n      );\n    }\n\n    const subscription = this.emitter.addListener('messaging_notification_opened', listener);\n    return () => subscription.remove();\n  }\n\n  onTokenRefresh(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onTokenRefresh(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_token_refresh', event => {\n      const { token } = event;\n      listener(token);\n    });\n    return () => subscription.remove();\n  }\n\n  /**\n   * @platform ios\n   */\n  requestPermission(permissions) {\n    if (isAndroid) {\n      return Promise.resolve(1);\n    }\n\n    const defaultPermissions = {\n      alert: true,\n      announcement: false,\n      badge: true,\n      carPlay: true,\n      provisional: false,\n      sound: true,\n      criticalAlert: false,\n    };\n\n    if (!permissions) {\n      return this.native.requestPermission(defaultPermissions);\n    }\n\n    if (!isObject(permissions)) {\n      throw new Error('firebase.messaging().requestPermission(*) expected an object value.');\n    }\n\n    Object.entries(permissions).forEach(([key, value]) => {\n      if (!hasOwnProperty(defaultPermissions, key)) {\n        throw new Error(\n          `firebase.messaging().requestPermission(*) unexpected key \"${key}\" provided to permissions object.`,\n        );\n      }\n\n      if (!isBoolean(value)) {\n        throw new Error(\n          `firebase.messaging().requestPermission(*) the permission \"${key}\" expected a boolean value.`,\n        );\n      }\n\n      defaultPermissions[key] = value;\n    });\n\n    return this.native.requestPermission(defaultPermissions);\n  }\n\n  registerDeviceForRemoteMessages() {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n\n    const autoRegister = this.firebaseJson['messaging_ios_auto_register_for_remote_messages'];\n    if (autoRegister === undefined || autoRegister === true) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Usage of \"messaging().registerDeviceForRemoteMessages()\" is not required. You only need to register if auto-registration is disabled in your 'firebase.json' configuration file via the 'messaging_ios_auto_register_for_remote_messages' property.`,\n      );\n    }\n\n    this._isRegisteredForRemoteNotifications = true;\n    return this.native.registerForRemoteNotifications();\n  }\n\n  /**\n   * @platform ios\n   * @deprecated\n   */\n  registerForRemoteNotifications() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[deprecation] Usage of \"registerForRemoteNotifications\" will be removed in v7. Use \"registerDeviceForRemoteMessages\" instead.',\n    );\n\n    return this.registerDeviceForRemoteMessages();\n  }\n\n  /**\n   * @platform ios\n   */\n  unregisterDeviceForRemoteMessages() {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    this._isRegisteredForRemoteNotifications = false;\n    return this.native.unregisterForRemoteNotifications();\n  }\n\n  /**\n   * @platform ios\n   * @deprecated\n   */\n  unregisterForRemoteNotifications() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[deprecation] Usage of \"unregisterForRemoteNotifications\" will be removed in v7. Use \"unregisterDeviceForRemoteMessages\" instead.',\n    );\n\n    return this.unregisterDeviceForRemoteMessages();\n  }\n\n  /**\n   * @platform ios\n   */\n  getAPNSToken() {\n    if (isAndroid) {\n      return Promise.resolve(null);\n    }\n    return this.native.getAPNSToken();\n  }\n\n  hasPermission() {\n    return this.native.hasPermission();\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#public-void-ondeletedmessages-\n  onDeletedMessages(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onDeletedMessages(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_deleted', listener);\n    return () => subscription.remove();\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#onMessageSent(java.lang.String)\n  onMessageSent(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onMessageSent(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_sent', listener);\n    return () => {\n      subscription.remove();\n    };\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#onSendError(java.lang.String,%20java.lang.Exception)\n  onSendError(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onSendError(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_send_error', listener);\n    return () => subscription.remove();\n  }\n\n  /**\n   * @platform android\n   */\n  setBackgroundMessageHandler(handler) {\n    if (!isFunction(handler)) {\n      throw new Error(\n        \"firebase.messaging().setBackgroundMessageHandler(*) 'handler' expected a function.\",\n      );\n    }\n\n    backgroundMessageHandler = handler;\n  }\n\n  sendMessage(remoteMessage) {\n    let options;\n    try {\n      options = remoteMessageOptions(this.app.options.messagingSenderId, remoteMessage);\n    } catch (e) {\n      throw new Error(`firebase.messaging().sendMessage(*) ${e.message}.`);\n    }\n\n    return this.native.sendMessage(options);\n  }\n\n  subscribeToTopic(topic) {\n    if (!isString(topic)) {\n      throw new Error(\"firebase.messaging().subscribeToTopic(*) 'topic' expected a string value.\");\n    }\n\n    if (topic.indexOf('/') > -1) {\n      throw new Error('firebase.messaging().subscribeToTopic(*) \\'topic\\' must not include \"/\".');\n    }\n\n    return this.native.subscribeToTopic(topic);\n  }\n\n  unsubscribeFromTopic(topic) {\n    if (!isString(topic)) {\n      throw new Error(\n        \"firebase.messaging().unsubscribeFromTopic(*) 'topic' expected a string value.\",\n      );\n    }\n\n    if (topic.indexOf('/') > -1) {\n      throw new Error(\n        'firebase.messaging().unsubscribeFromTopic(*) \\'topic\\' must not include \"/\".',\n      );\n    }\n\n    return this.native.unsubscribeFromTopic(topic);\n  }\n\n  /**\n   * unsupported\n   */\n\n  useServiceWorker() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'firebase.messaging().useServiceWorker() is not supported on react-native-firebase.',\n    );\n  }\n\n  usePublicVapidKey() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'firebase.messaging().usePublicVapidKey() is not supported on react-native-firebase.',\n    );\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/messaging';\nexport const SDK_VERSION = version;\n\n// import messaging from '@react-native-firebase/messaging';\n// messaging().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: [\n    'messaging_token_refresh',\n    'messaging_message_sent',\n    'messaging_message_deleted',\n    'messaging_message_received',\n    'messaging_message_send_error',\n    'messaging_notification_opened',\n    ...(isIOS ? ['messaging_message_received_background'] : []),\n  ],\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseMessagingModule,\n});\n\n// import messaging, { firebase } from '@react-native-firebase/messaging';\n// messaging().X(...);\n// firebase.messaging().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"script"}