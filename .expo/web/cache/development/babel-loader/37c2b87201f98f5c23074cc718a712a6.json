{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _App = _interopRequireDefault(require(\"../config/App.config\"));\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar storeKey = 'NoticeUtils';\n\nfunction createNoticeUtil() {\n  var _notices = [];\n  var callback = [];\n\n  var init = function init() {\n    var data;\n    return _regenerator.default.async(function init$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem(storeKey));\n\n          case 2:\n            data = _context.sent;\n\n            if (data) {\n              try {\n                _notices = JSON.parse(data);\n              } catch (e) {\n                console.log('NoticeUtils', 'init error', e);\n              }\n\n              console.log('NoticeUtils', 'init', data, '=>', _notices);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var unreadNumber = function unreadNumber() {\n    return _notices.filter(function (notice) {\n      return !notice.isRead;\n    }).length;\n  };\n\n  var addNotice = function addNotice(msg) {\n    console.log('NoticeUtils', 'add notice', msg);\n\n    if (_notices.length > _App.default.NOTI_MAX_LENGTH) {\n      _notices.shift();\n    }\n\n    _notices.push(_objectSpread(_objectSpread({}, msg), {}, {\n      isRead: false\n    }));\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var readAll = function readAll() {\n    console.log('NoticeUtils', 'read all');\n    _notices = _notices.map(function (notice) {\n      return _objectSpread(_objectSpread({}, notice), {}, {\n        isRead: true\n      });\n    });\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var readMsg = function readMsg(sendTime) {\n    console.log('NoticeUtils', 'read', sendTime);\n    _notices = _notices.map(function (notice) {\n      return notice.sendTime === sendTime ? _objectSpread(_objectSpread({}, notice), {}, {\n        isRead: true\n      }) : notice;\n    });\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var deleteMsg = function deleteMsg(messageId) {\n    console.log('NoticeUtils', 'delete', messageId);\n    _notices = _notices.filter(function (notice) {\n      return notice.messageId !== messageId;\n    });\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var deleteMsgs = function deleteMsgs(messageIds) {\n    console.log('NoticeUtils', 'delete', messageIds);\n\n    var _messageIds = messageIds != null ? messageIds : [];\n\n    _notices = _notices.filter(function (notice) {\n      return !_messageIds.include(notice.messageId);\n    });\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var deleteAll = function deleteAll() {\n    console.log('NoticeUtils', 'delete all');\n    _notices = [];\n\n    _asyncStorage.default.setItem(storeKey, JSON.stringify(_notices));\n\n    callback.forEach(function (cb) {\n      return cb();\n    });\n  };\n\n  var addCallBack = function addCallBack(cb) {\n    if (callback.filter(function (c) {\n      return c === cb;\n    }).length === 0) {\n      callback.push(cb);\n    }\n  };\n\n  var removeCallBack = function removeCallBack(cb) {\n    callback = callback.filter(function (c) {\n      return c !== cb;\n    });\n  };\n\n  return {\n    notices: function notices() {\n      return _notices;\n    },\n    storeKey: storeKey,\n    unreadNumber: unreadNumber,\n    init: init,\n    addNotice: addNotice,\n    readMsg: readMsg,\n    readAll: readAll,\n    deleteMsg: deleteMsg,\n    deleteMsgs: deleteMsgs,\n    deleteAll: deleteAll,\n    addCallBack: addCallBack,\n    removeCallBack: removeCallBack\n  };\n}\n\nvar NoticeUtils = createNoticeUtil();\nvar _default = NoticeUtils;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/session/NoticeUtils.js"],"names":["storeKey","createNoticeUtil","notices","callback","init","AsyncStorage","getItem","data","JSON","parse","e","console","log","unreadNumber","filter","notice","isRead","length","addNotice","msg","AppConfig","NOTI_MAX_LENGTH","shift","push","setItem","stringify","forEach","cb","readAll","map","readMsg","sendTime","deleteMsg","messageId","deleteMsgs","messageIds","_messageIds","include","deleteAll","addCallBack","c","removeCallBack","NoticeUtils"],"mappings":"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","sourcesContent":["import AppConfig from '../config/App.config';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nconst storeKey = 'NoticeUtils';\r\nfunction createNoticeUtil() {\r\n  let notices = [];\r\n  let callback = [];\r\n\r\n  const init = async () => {\r\n    const data = await AsyncStorage.getItem(storeKey);\r\n    if (data) {\r\n      try {\r\n        notices = JSON.parse(data);\r\n      } catch (e) {\r\n        console.log('NoticeUtils', 'init error', e);\r\n      }\r\n      console.log('NoticeUtils', 'init', data, '=>', notices);\r\n    }\r\n  };\r\n  const unreadNumber = () => notices.filter(notice => !notice.isRead).length;\r\n  const addNotice = msg => {\r\n    console.log('NoticeUtils', 'add notice', msg);\r\n    if (notices.length > AppConfig.NOTI_MAX_LENGTH) {\r\n      notices.shift();\r\n    }\r\n    notices.push({ ...msg, isRead: false });\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const readAll = () => {\r\n    console.log('NoticeUtils', 'read all');\r\n    notices = notices.map(notice => ({ ...notice, isRead: true }));\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const readMsg = sendTime => {\r\n    console.log('NoticeUtils', 'read', sendTime);\r\n    notices = notices.map(notice =>\r\n      notice.sendTime === sendTime ? { ...notice, isRead: true } : notice,\r\n    );\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const deleteMsg = messageId => {\r\n    console.log('NoticeUtils', 'delete', messageId);\r\n    notices = notices.filter(notice => notice.messageId !== messageId);\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const deleteMsgs = messageIds => {\r\n    console.log('NoticeUtils', 'delete', messageIds);\r\n    const _messageIds = messageIds ?? [];\r\n    notices = notices.filter(notice => !_messageIds.include(notice.messageId));\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const deleteAll = () => {\r\n    console.log('NoticeUtils', 'delete all');\r\n    notices = [];\r\n    AsyncStorage.setItem(storeKey, JSON.stringify(notices));\r\n    callback.forEach(cb => cb());\r\n  };\r\n  const addCallBack = cb => {\r\n    if (callback.filter(c => c === cb).length === 0) {\r\n      callback.push(cb);\r\n    }\r\n  };\r\n  const removeCallBack = cb => {\r\n    callback = callback.filter(c => c !== cb);\r\n  };\r\n  return {\r\n    notices: () => notices,\r\n    storeKey,\r\n    unreadNumber,\r\n    init,\r\n    addNotice,\r\n    readMsg,\r\n    readAll,\r\n    deleteMsg,\r\n    deleteMsgs,\r\n    deleteAll,\r\n    addCallBack,\r\n    removeCallBack,\r\n  };\r\n}\r\n\r\nconst NoticeUtils = createNoticeUtil();\r\n\r\nexport default NoticeUtils;\r\n"]},"metadata":{},"sourceType":"script"}