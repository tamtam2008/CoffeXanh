{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _iid2 = _interopRequireDefault(require(\"@react-native-firebase/iid\"));\n\nvar _messaging = _interopRequireDefault(require(\"@react-native-firebase/messaging\"));\n\nvar _NoticeUtils = _interopRequireDefault(require(\"./NoticeUtils\"));\n\nvar _UserService = _interopRequireDefault(require(\"../services/UserService\"));\n\nvar _SessionUtils = _interopRequireDefault(require(\"./SessionUtils\"));\n\nfunction createFirebaseUtil() {\n  var _iid = '';\n  var _token = '';\n\n  var init = function init() {\n    return _regenerator.default.async(function init$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap((0, _iid2.default)().get());\n\n          case 2:\n            _iid = _context.sent;\n            console.log('FirebaseUtil', 'Current Instance ID: ', _iid);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var saveTokenToDatabase = function saveTokenToDatabase(token) {\n    var userId;\n    return _regenerator.default.async(function saveTokenToDatabase$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _token = token;\n            userId = _SessionUtils.default.session().userId;\n            userId && _UserService.default.updateFireBase(userId, token).subscribe(function (res) {\n              if (res.response.status === 200) {\n                console.log('FirebaseUtil', 'SaveToken', token, 'update token success');\n              } else {\n                console.log('FirebaseUtil', 'SaveToken', token, 'update token fail');\n              }\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleToken = function handleToken() {\n    if (_SessionUtils.default.session().isLogin) {\n      (0, _messaging.default)().getToken().then(function (token) {\n        return saveTokenToDatabase(token);\n      });\n      return function () {\n        (0, _messaging.default)().onTokenRefresh(function (token) {\n          saveTokenToDatabase(token);\n        });\n      };\n    }\n  };\n\n  var onMessage = function onMessage() {\n    (0, _messaging.default)().onNotificationOpenedApp(function (remoteMessage) {\n      console.log('Notification caused app to open from background state:', remoteMessage);\n    });\n    (0, _messaging.default)().getInitialNotification().then(function (remoteMessage) {\n      if (remoteMessage) {\n        console.log('Notification caused app to open from quit state:', remoteMessage);\n      }\n    });\n    return (0, _messaging.default)().onMessage(function _callee(remoteMessage) {\n      return _regenerator.default.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('FirebaseUtil', \"Message:  \\\"\" + JSON.stringify(remoteMessage) + \"\\\"\");\n\n              _NoticeUtils.default.addNotice(remoteMessage);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  return {\n    init: init,\n    handleToken: handleToken,\n    onMessage: onMessage,\n    id: _iid,\n    token: _token\n  };\n}\n\nvar FirebaseUtil = createFirebaseUtil();\nvar _default = FirebaseUtil;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/session/FirebaseUtil.js"],"names":["createFirebaseUtil","_iid","_token","init","get","console","log","saveTokenToDatabase","token","userId","SessionUtils","session","UserService","updateFireBase","subscribe","res","response","status","handleToken","isLogin","getToken","then","onTokenRefresh","onMessage","onNotificationOpenedApp","remoteMessage","getInitialNotification","JSON","stringify","NoticeUtils","addNotice","id","FirebaseUtil"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAASA,kBAAT,GAA8B;AAC5B,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,qBAAMC,GAAN,EADF;;AAAA;AACXH,YAAAA,IADW;AAEXI,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,uBAA5B,EAAqDL,IAArD;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAIA,MAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BN,YAAAA,MAAM,GAAGM,KAAT;AACMC,YAAAA,MAFoB,GAEXC,sBAAaC,OAAb,GAAuBF,MAFZ;AAG1BA,YAAAA,MAAM,IACJG,qBAAYC,cAAZ,CAA2BJ,MAA3B,EAAmCD,KAAnC,EAA0CM,SAA1C,CAAoD,UAAAC,GAAG,EAAI;AACzD,kBAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;AAC/BZ,gBAAAA,OAAO,CAACC,GAAR,CACE,cADF,EAEE,WAFF,EAGEE,KAHF,EAIE,sBAJF;AAMD,eAPD,MAOO;AACLH,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,WAA5B,EAAyCE,KAAzC,EAAgD,mBAAhD;AACD;AACF,aAXD,CADF;;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAiBA,MAAMU,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAIR,sBAAaC,OAAb,GAAuBQ,OAA3B,EAAoC;AAElC,gCACGC,QADH,GAEGC,IAFH,CAEQ,UAAAb,KAAK,EAAI;AACb,eAAOD,mBAAmB,CAACC,KAAD,CAA1B;AACD,OAJH;AAMA,aAAO,YAAM;AACX,kCAAYc,cAAZ,CAA2B,UAAAd,KAAK,EAAI;AAClCD,UAAAA,mBAAmB,CAACC,KAAD,CAAnB;AACD,SAFD;AAGD,OAJD;AAKD;AACF,GAfD;;AAgBA,MAAMe,SAAS,GAAG,SAAZA,SAAY,GAAM;AAEtB,8BAAYC,uBAAZ,CAAoC,UAAAC,aAAa,EAAI;AACnDpB,MAAAA,OAAO,CAACC,GAAR,CACE,wDADF,EAEEmB,aAFF;AAKD,KAND;AASA,8BACGC,sBADH,GAEGL,IAFH,CAEQ,UAAAI,aAAa,EAAI;AACrB,UAAIA,aAAJ,EAAmB;AACjBpB,QAAAA,OAAO,CAACC,GAAR,CACE,kDADF,EAEEmB,aAFF;AAKD;AACF,KAVH;AAWA,WAAO,0BAAYF,SAAZ,CAAsB,iBAAME,aAAN;AAAA;AAAA;AAAA;AAAA;AAC3BpB,cAAAA,OAAO,CAACC,GAAR,CACE,cADF,mBAEgBqB,IAAI,CAACC,SAAL,CAAeH,aAAf,CAFhB;;AAIAI,mCAAYC,SAAZ,CAAsBL,aAAtB;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB,CAAP;AAOD,GA7BD;;AA8BA,SAAO;AACLtB,IAAAA,IAAI,EAAJA,IADK;AAELe,IAAAA,WAAW,EAAXA,WAFK;AAGLK,IAAAA,SAAS,EAATA,SAHK;AAILQ,IAAAA,EAAE,EAAE9B,IAJC;AAKLO,IAAAA,KAAK,EAAEN;AALF,GAAP;AAOD;;AAED,IAAM8B,YAAY,GAAGhC,kBAAkB,EAAvC;eAEegC,Y","sourcesContent":["import iid from '@react-native-firebase/iid';\r\nimport messaging from '@react-native-firebase/messaging';\r\nimport NoticeUtils from './NoticeUtils';\r\nimport UserService from '../services/UserService';\r\nimport SessionUtils from './SessionUtils';\r\n\r\nfunction createFirebaseUtil() {\r\n  let _iid = '';\r\n  let _token = '';\r\n  const init = async () => {\r\n    _iid = await iid().get();\r\n    console.log('FirebaseUtil', 'Current Instance ID: ', _iid);\r\n  };\r\n  const saveTokenToDatabase = async token => {\r\n    _token = token;\r\n    const userId = SessionUtils.session().userId;\r\n    userId &&\r\n      UserService.updateFireBase(userId, token).subscribe(res => {\r\n        if (res.response.status === 200) {\r\n          console.log(\r\n            'FirebaseUtil',\r\n            'SaveToken',\r\n            token,\r\n            'update token success',\r\n          );\r\n        } else {\r\n          console.log('FirebaseUtil', 'SaveToken', token, 'update token fail');\r\n        }\r\n      });\r\n  };\r\n  const handleToken = () => {\r\n    if (SessionUtils.session().isLogin) {\r\n      // Get the device token\r\n      messaging()\r\n        .getToken()\r\n        .then(token => {\r\n          return saveTokenToDatabase(token);\r\n        });\r\n      // Listen to whether the token changes\r\n      return () => {\r\n        messaging().onTokenRefresh(token => {\r\n          saveTokenToDatabase(token);\r\n        });\r\n      };\r\n    }\r\n  };\r\n  const onMessage = () => {\r\n    // Assume a message-notification contains a \"type\" property in the data payload of the screen to open\r\n    messaging().onNotificationOpenedApp(remoteMessage => {\r\n      console.log(\r\n        'Notification caused app to open from background state:',\r\n        remoteMessage,\r\n      );\r\n      // navigation.navigate(remoteMessage.data.type);\r\n    });\r\n\r\n    // Check whether an initial notification is available\r\n    messaging()\r\n      .getInitialNotification()\r\n      .then(remoteMessage => {\r\n        if (remoteMessage) {\r\n          console.log(\r\n            'Notification caused app to open from quit state:',\r\n            remoteMessage,\r\n          );\r\n          // setInitialRoute(remoteMessage.data.type); // e.g. \"Settings\"\r\n        }\r\n      });\r\n    return messaging().onMessage(async remoteMessage => {\r\n      console.log(\r\n        'FirebaseUtil',\r\n        `Message:  \"${JSON.stringify(remoteMessage)}\"`,\r\n      );\r\n      NoticeUtils.addNotice(remoteMessage);\r\n    });\r\n  };\r\n  return {\r\n    init,\r\n    handleToken,\r\n    onMessage,\r\n    id: _iid,\r\n    token: _token,\r\n  };\r\n}\r\n\r\nconst FirebaseUtil = createFirebaseUtil();\r\n\r\nexport default FirebaseUtil;\r\n"]},"metadata":{},"sourceType":"script"}