{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _MapService = _interopRequireDefault(require(\"../../../../services/MapService\"));\n\nvar _MapStore = _interopRequireDefault(require(\"./MapStore.action\"));\n\nvar Controller = {\n  getData: function getData(dispatch) {\n    dispatch({\n      type: _MapStore.default.GET_DATA\n    });\n\n    _MapService.default.getProvinceAndDistMap().subscribe(function (data) {\n      var status = data.response.status;\n\n      if (status === 200) {\n        dispatch({\n          type: _MapStore.default.GET_DATA_SUCCESS,\n          payload: data.response.dataDist\n        });\n      } else {\n        var failMsg = 'notify.failMsg';\n\n        if (error.status === 500) {\n          failMsg = 'notify.code.500';\n        }\n\n        dispatch({\n          type: _MapStore.default.GET_STORE_FAIL,\n          payload: failMsg\n        });\n      }\n    });\n  },\n  findStore: function findStore(position, dispatch, callback) {\n    _MapService.default.loadStoreByLatLng({\n      lat: position.latitude,\n      lon: position.longitude\n    }).subscribe(function (data) {\n      var status = data.response.status;\n\n      if (status === 200) {\n        dispatch({\n          type: _MapStore.default.GET_STORE_SUCCESS,\n          payload: data.response\n        });\n      } else {\n        var failMsg = 'notify.failMsg';\n\n        if (status === 500) {\n          failMsg = 'notify.code.500';\n        }\n\n        dispatch({\n          type: _MapStore.default.GET_STORE_FAIL,\n          payload: failMsg\n        });\n      }\n\n      callback();\n    });\n  },\n  getStore: function getStore(_ref, dispatch, callback) {\n    var provinceId = _ref.provinceId,\n        districtId = _ref.districtId;\n    dispatch({\n      type: _MapStore.default.GET_STORE\n    });\n\n    _MapService.default.getStoreByDistId(districtId).subscribe(function (res) {\n      var status = res.response.status;\n\n      if (status === 200) {\n        var _res$response = res.response,\n            data = _res$response.data,\n            pathPhoto = _res$response.pathPhoto;\n        dispatch({\n          type: _MapStore.default.GET_STORE_SUCCESS,\n          payload: {\n            provinceId: provinceId,\n            districtId: districtId,\n            store: data,\n            pathPhoto: pathPhoto\n          }\n        });\n        callback(data);\n      } else {\n        var failMsg = status === 500 || status === 0 ? \"notify.code.\" + status : 'notify.failMsg';\n        dispatch({\n          type: _MapStore.default.GET_STORE_FAIL,\n          payload: failMsg\n        });\n      }\n    });\n  }\n};\nvar _default = Controller;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/src/screens/root/store/mapStore/MapStore.controller.js"],"names":["Controller","getData","dispatch","type","Actions","GET_DATA","MapService","getProvinceAndDistMap","subscribe","data","status","response","GET_DATA_SUCCESS","payload","dataDist","failMsg","error","GET_STORE_FAIL","findStore","position","callback","loadStoreByLatLng","lat","latitude","lon","longitude","GET_STORE_SUCCESS","getStore","provinceId","districtId","GET_STORE","getStoreByDistId","res","pathPhoto","store"],"mappings":"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","sourcesContent":["import MapService from '../../../../services/MapService';\r\nimport Actions from './MapStore.action';\r\n\r\nconst Controller = {\r\n  getData: dispatch => {\r\n    dispatch({\r\n      type: Actions.GET_DATA,\r\n    });\r\n    MapService.getProvinceAndDistMap().subscribe(data => {\r\n      const { status } = data.response;\r\n      if (status === 200) {\r\n        dispatch({\r\n          type: Actions.GET_DATA_SUCCESS,\r\n          payload: data.response.dataDist,\r\n        });\r\n      } else {\r\n        let failMsg = 'notify.failMsg';\r\n        if (error.status === 500) {\r\n          failMsg = 'notify.code.500';\r\n        }\r\n        dispatch({ type: Actions.GET_STORE_FAIL, payload: failMsg });\r\n      }\r\n    });\r\n  },\r\n  findStore: (position, dispatch, callback) => {\r\n    MapService.loadStoreByLatLng({\r\n      lat: position.latitude,\r\n      lon: position.longitude,\r\n    }).subscribe(data => {\r\n      const { status } = data.response;\r\n      if (status === 200) {\r\n        dispatch({ type: Actions.GET_STORE_SUCCESS, payload: data.response });\r\n      } else {\r\n        let failMsg = 'notify.failMsg';\r\n        if (status === 500) {\r\n          failMsg = 'notify.code.500';\r\n        }\r\n        dispatch({ type: Actions.GET_STORE_FAIL, payload: failMsg });\r\n      }\r\n      callback();\r\n    });\r\n  },\r\n  getStore: ({ provinceId, districtId }, dispatch, callback) => {\r\n    dispatch({ type: Actions.GET_STORE });\r\n    MapService.getStoreByDistId(districtId).subscribe(res => {\r\n      const { status } = res.response;\r\n      if (status === 200) {\r\n        const { data, pathPhoto } = res.response;\r\n        dispatch({\r\n          type: Actions.GET_STORE_SUCCESS,\r\n          payload: {\r\n            provinceId,\r\n            districtId,\r\n            store: data,\r\n            pathPhoto,\r\n          },\r\n        });\r\n        callback(data);\r\n      } else {\r\n        const failMsg =\r\n          status === 500 || status === 0\r\n            ? `notify.code.${status}`\r\n            : 'notify.failMsg';\r\n        dispatch({ type: Actions.GET_STORE_FAIL, payload: failMsg });\r\n      }\r\n    });\r\n  },\r\n};\r\n\r\nexport default Controller;\r\n"]},"metadata":{},"sourceType":"script"}