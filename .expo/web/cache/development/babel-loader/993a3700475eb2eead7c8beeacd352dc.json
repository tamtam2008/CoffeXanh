{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThemeConsumer = exports.default = exports.ThemeContext = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\n\nvar _colors = _interopRequireDefault(require(\"./colors\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\ADMINS\\\\Desktop\\\\GreenApp\\\\CoffeXanh\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ThemeContext = _react.default.createContext({\n  theme: {\n    colors: _colors.default\n  }\n});\n\nexports.ThemeContext = ThemeContext;\n\nvar ThemeProvider = function (_React$Component) {\n  (0, _inherits2.default)(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ThemeProvider);\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: (0, _deepmerge.default)(theme, updates)\n        };\n      });\n    };\n\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: (0, _deepmerge.default)(_this.defaultTheme, theme)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    _this.defaultTheme = (0, _deepmerge.default)({\n      colors: _colors.default\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n  return ThemeProvider;\n}(_react.default.Component);\n\nexports.default = ThemeProvider;\nThemeProvider.propTypes = {\n  theme: _propTypes.default.object,\n  children: _propTypes.default.node.isRequired\n};\nThemeProvider.defaultProps = {\n  theme: {}\n};\nvar ThemeConsumer = ThemeContext.Consumer;\nexports.ThemeConsumer = ThemeConsumer;","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["ThemeContext","React","createContext","theme","colors","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","children","Component","propTypes","PropTypes","object","node","isRequired","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEO,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAANA;AADK;AADuC,CAApB,CAArB;;;;IAMcC,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UAcnBC,WAdmB,GAcL,UAACC,OAAD,EAAa;AACzB,YAAKC,QAAL,CAAc;AAAA,YAAGN,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAE,wBAAUA,KAAV,EAAiBK,OAAjB;AADqB,SAAhB;AAAA,OAAd;AAGD,KAlBkB;;AAAA,UAoBnBE,YApBmB,GAoBJ,UAACP,KAAD,EAAW;AACxB,YAAKM,QAAL,CAAc;AAAA,eAAO;AACnBN,UAAAA,KAAK,EAAE,wBAAU,MAAKQ,YAAf,EAA6BR,KAA7B;AADY,SAAP;AAAA,OAAd;AAGD,KAxBkB;;AAAA,UA0BnBS,QA1BmB,GA0BR;AAAA,aAAM,MAAKC,KAAL,CAAWV,KAAjB;AAAA,KA1BQ;;AAGjB,UAAKQ,YAAL,GAAoB,wBAClB;AACEP,MAAAA,MAAM,EAANA;AADF,KADkB,EAIlBE,KAAK,CAACH,KAJY,CAApB;AAMA,UAAKU,KAAL,GAAa;AACXV,MAAAA,KAAK,EAAE,MAAKQ;AADD,KAAb;AATiB;AAYlB;;;;6BAgBQ;AACP,aACE,6BAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLR,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KADb;AAELI,UAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,UAAAA,YAAY,EAAE,KAAKA;AAHd,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKJ,KAAL,CAAWQ,QAPd,CADF;AAWD;;;EAzCwCb,eAAMc,S;;;AA4CjDV,aAAa,CAACW,SAAd,GAA0B;AACxBb,EAAAA,KAAK,EAAEc,mBAAUC,MADO;AAExBJ,EAAAA,QAAQ,EAAEG,mBAAUE,IAAV,CAAeC;AAFD,CAA1B;AAKAf,aAAa,CAACgB,YAAd,GAA6B;AAC3BlB,EAAAA,KAAK,EAAE;AADoB,CAA7B;AAIO,IAAMmB,aAAa,GAAGtB,YAAY,CAACuB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultTheme = deepmerge(\n      {\n        colors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n    };\n  }\n\n  updateTheme = (updates) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"script"}