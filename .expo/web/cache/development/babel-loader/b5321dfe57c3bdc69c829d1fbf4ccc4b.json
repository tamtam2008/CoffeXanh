{"ast":null,"code":"var _reactNative = require(\"react-native\");\n\nvar _RefreshHeader = require(\"./RefreshHeader\");\n\nvar _LoadingFooter = require(\"./LoadingFooter\");","map":{"version":3,"sources":["C:/Users/ADMINS/Desktop/GreenApp/CoffeXanh/node_modules/react-native-spring-scrollview/Types.js"],"names":[],"mappings":"AASA;;AACA;;AACA","sourcesContent":["/*\n *\n * Created by Stone\n * https://github.com/bolan9999\n * Email: shanshang130@gmail.com\n * Date: 2018/7/17\n *\n */\n\nimport { Animated, ViewProps, ViewStyle } from \"react-native\";\nimport { RefreshHeader } from \"./RefreshHeader\";\nimport { LoadingFooter } from \"./LoadingFooter\";\n\nexport interface IndexPath {\n  section: number,\n  row: number\n}\n\nexport interface Offset {\n  x: number,\n  y: number\n}\n\nexport interface NativeContentOffset {\n  x?: Animated.Value,\n  y?: Animated.Value\n}\n\nexport type RefreshStyle = \"topping\" | \"stickyScrollView\" | \"stickyContent\";\n\nexport type LoadingStyle = \"bottoming\" | \"stickyScrollView\" | \"stickyContent\";\n\nexport interface ScrollEvent {\n  nativeEvent: {\n    contentOffset: {\n      x: number,\n      y: number\n    }\n  }\n}\n\nexport interface SpringScrollViewPropType extends ViewProps {\n  style?: ViewStyle,\n  contentStyle?: ViewStyle,\n  bounces?: boolean,\n  scrollEnabled?: boolean,\n  directionalLockEnabled?: boolean,\n  initialContentOffset?: Offset,\n  showsVerticalScrollIndicator?: boolean,\n  showsHorizontalScrollIndicator?: boolean,\n  refreshHeader?: RefreshHeader,\n  loadingFooter?: LoadingFooter,\n  onRefresh?: () => any,\n  onLoading?: () => any,\n  allLoaded?: boolean;\n  textInputRefs?: any[],\n  inputToolBarHeight?: number,\n  tapToHideKeyboard?: boolean,\n  onTouchBegin?: () => any,\n  onTouchEnd?: () => any,\n  inverted?: boolean;\n  onMomentumScrollBegin?: () => any,\n  onMomentumScrollEnd?: () => any,\n  onScroll?: (evt: ScrollEvent) => any,\n  keyboardShouldPersistTaps?: \"always\"|\"never\"|\"handled\",\n  onNativeContentOffsetExtract?: NativeContentOffset,\n  onSizeChange?: ({ width: number, height: number }) => any,\n  onContentSizeChange?: ({ width: number, height: number }) => any\n}\n"]},"metadata":{},"sourceType":"script"}